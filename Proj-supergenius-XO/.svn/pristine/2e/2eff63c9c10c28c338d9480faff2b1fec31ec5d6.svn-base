package com.supergenius.xo.finance.dao;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.HashMap;
import java.util.Map;

import org.joda.time.DateTime;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.genius.core.base.constant.BaseMapperDict;
import com.genius.core.base.utils.GlobalUtil;
import com.genius.model.base.enums.EStatus;
import com.supergenius.xo.finance.entity.Inbox;
import com.supergenius.xo.finance.enums.EFinanceMsg;
import com.supergenius.xo.mock.testconstants.TestConst;

/**
 * 收件箱Dao测试类
 * 
 * @author LiJiacheng
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath*:**/applicationContext**.xml" })
public class InboxDaoTest {

	@Autowired
	InboxDao inboxDao;

	Inbox entity;

	@Test
	public void testGet() {
		entity = inboxDao.get(TestConst.uid);
		assertNotNull(entity);
		assertEquals(TestConst.uid, entity.getUid());
	}

	@Test
	public void testGetOne() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(BaseMapperDict.uid, TestConst.uid);
		assertNotNull(inboxDao.getOne(map));
	}

	@Test
	public void testGetList() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(BaseMapperDict.uid, TestConst.uid);
		assertTrue(inboxDao.getList(map).size() > 0);
	}

	@Test
	public void testInsert() {
		entity = new Inbox();
		String uidString = GlobalUtil.getUUID();
		entity.setUid(uidString);
		entity.setUseruid(TestConst.uid1);
		entity.setMsguid(TestConst.uid2);
		entity.setIsread(false);
		entity.setType(EFinanceMsg.sys);
		entity.setCreatetime(new DateTime());
		inboxDao.insert(entity);
		assertNotNull(inboxDao.get(uidString));
		inboxDao.delete(uidString);
		assertNull(inboxDao.get(uidString));
	}

	@Test
	public void testUpdate() {
		entity = inboxDao.get(TestConst.uid);
		entity.setStatus(EStatus.disable);
		inboxDao.update(entity);
		assertEquals(EStatus.disable, inboxDao.get(TestConst.uid).getStatus());
	}

	@Test
	public void testUpdateFields() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(BaseMapperDict.uid, TestConst.uid);
		map.put(BaseMapperDict.status, EStatus.enable);
		inboxDao.updateFields(map);
		assertEquals(EStatus.enable, inboxDao.get(TestConst.uid).getStatus());
	}

}
