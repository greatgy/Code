package com.supergenius.xo.finance.dao;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.HashMap;
import java.util.Map;

import org.joda.time.DateTime;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.genius.core.base.constant.BaseMapperDict;
import com.genius.core.base.utils.GlobalUtil;
import com.genius.model.base.enums.EStatus;
import com.supergenius.xo.finance.entity.Subscribe;
import com.supergenius.xo.finance.enums.EFollow;
import com.supergenius.xo.mock.testconstants.TestConst;

/**
 * 订阅Dao测试类
 * 
 * @author LiJiacheng
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath*:**/applicationContext**.xml" })
public class SubscribeDaoTest {

	@Autowired
	SubscribeDao subscribeDao;

	Subscribe entity;

	@Test
	public void testGet() {
		entity = subscribeDao.get(TestConst.uid);
		assertNotNull(entity);
		assertEquals(TestConst.uid, entity.getUid());
	}

	@Test
	public void testGetOne() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(BaseMapperDict.uid, TestConst.uid);
		assertNotNull(subscribeDao.getOne(map));
	}

	@Test
	public void testGetList() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(BaseMapperDict.uid, TestConst.uid);
		assertTrue(subscribeDao.getList(map).size() > 0);
	}

	@Test
	public void testInsert() {
		entity = new Subscribe();
		String uid = GlobalUtil.getUUID();
		entity.setUid(uid);
		entity.setUseruid(TestConst.uid1);
		entity.setRefuseruid(TestConst.uid2);
		entity.setFollow(EFollow.follow);
		entity.setCreatetime(new DateTime());
		subscribeDao.insert(entity);
		assertNotNull(subscribeDao.get(uid));
		subscribeDao.delete(uid);
		assertNull(subscribeDao.get(uid));
	}

	@Test
	public void testUpdate() {
		entity = subscribeDao.get(TestConst.uid);
		entity.setStatus(EStatus.disable);
		subscribeDao.update(entity);
		assertEquals(EStatus.disable, subscribeDao.get(TestConst.uid).getStatus());
	}

	@Test
	public void testUpdateFields() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(BaseMapperDict.uid, TestConst.uid);
		map.put(BaseMapperDict.status, EStatus.enable);
		subscribeDao.updateFields(map);
		assertEquals(EStatus.enable, subscribeDao.get(TestConst.uid).getStatus());
	}

}
