package com.supergenius.xo.finance.dao;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.genius.core.base.constant.BaseMapperDict;
import com.genius.core.base.utils.DateUtil;
import com.genius.core.base.utils.GlobalUtil;
import com.genius.core.base.utils.JsonUtil;
import com.genius.model.base.enums.EStatus;
import com.supergenius.xo.common.constants.MapperDict;
import com.supergenius.xo.common.enums.EChannel;
import com.supergenius.xo.finance.entity.CountDetail;
import com.supergenius.xo.finance.enums.ECountType;
import com.supergenius.xo.mock.testconstants.TestConst;

/**
 * CountDetailDao单元测试类
 * 
 * @author ShangJianguo
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath*:**/applicationContext**.xml" })
public class CountDetailDaoTest {

	@Autowired
	CountDetailDao dao;

	CountDetail entity;

	@Test
	public void testGet() {
		entity = dao.get(TestConst.uid);
		assertNotNull(entity);
		assertEquals(TestConst.uid, entity.getUid());
	}

	@Test
	public void testGetOne() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(BaseMapperDict.uid, TestConst.uid);
		assertNotNull(dao.getOne(map));
	}

	@Test
	public void testGetList() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(BaseMapperDict.uid, TestConst.uid);
		assertTrue(dao.getList(map).size() > 0);
	}

	@Test
	public void testInsert() {
		entity = new CountDetail();
		String uid = GlobalUtil.getUUID();
		entity.setUid(TestConst.uid1);
		entity.setUseruid(uid);
		entity.setRefuid(uid);
		entity.setType(ECountType.click);
		entity.setChannel(EChannel.index);
		entity.setCount(10);
		Map<String, Object> map = new HashMap<>();
		map.put(BaseMapperDict.createtime, "2014-10-17 12:12:12");
		entity.setData(JsonUtil.toJson(map));
		dao.insert(entity);
		assertNotNull(dao.get(TestConst.uid1));
		dao.delete(TestConst.uid1);
		assertNull(dao.get(TestConst.uid1));
	}
	
	/**
	 *	添加特殊的测试数据 
	 * 
	 * @author ShangJianguo
	 */
	@Ignore
	@Test
	public void testInsert2() {
		String uid = null;
		String refuid = "uid0000000000000000000000000000";
		String tempuid = "";
		for(int i=0;i<4;i++) {
			tempuid = refuid + i;
			for(int j=0;j<100*i;j++){
				entity = new CountDetail();
				uid = GlobalUtil.getUUID();
				entity.setUid(uid);
				entity.setUseruid(uid);
				entity.setRefuid(tempuid);
				entity.setType(ECountType.click);
				entity.setChannel(EChannel.finance);
				entity.setCount(10);
				dao.insert(entity);
				assertNotNull(dao.get(uid));
			}
		}
	}

	@Test
	public void testUpdate() {
		entity = dao.get(TestConst.uid);
		entity.setType(ECountType.click);
		dao.update(entity);
		assertEquals(ECountType.click, dao.get(TestConst.uid).getType());
	}

	@Test
	public void testUpdateFields() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(BaseMapperDict.uid, TestConst.uid);
		map.put(BaseMapperDict.type, ECountType.click);
		dao.updateFields(map);
		assertEquals(ECountType.click, dao.get(TestConst.uid).getType());
	}

	@Test
	public void testDeleteByMap() {
		for (int i = 0; i < 3; i++) {
			entity = new CountDetail();
			entity.setUid(GlobalUtil.getUUID());
			entity.setUseruid(TestConst.uid2);
			entity.setRefuid(TestConst.uid);
			dao.insert(entity);
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(BaseMapperDict.useruid, TestConst.uid2);
		assertTrue(dao.getList(map).size() == 3);
		dao.deleteByMap(map);
		assertTrue(dao.getList(map).size() == 0);
	}

	@Ignore
	@Test
	public void testGetCountcurr(){
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(MapperDict.status, EStatus.enable);
		int clickday = 30;
		int publishday = 90;
		Calendar cclickday = Calendar.getInstance();
		cclickday.add(Calendar.DAY_OF_MONTH, -clickday);
		Calendar cpublishday = Calendar.getInstance();
		cpublishday.add(Calendar.DAY_OF_MONTH, -publishday);
		
		map.put(MapperDict.type, ECountType.click);
		map.put(MapperDict.financetype, "1073741814");
		map.put(MapperDict.orderBy, "order by v desc");
		map.put(MapperDict.clickdayfrom, DateUtil.parseDate(cclickday.getTime(), DateUtil.FORMAT_DATE_CHINA));
		map.put(MapperDict.channel, EChannel.finance);
		map.put(MapperDict.publishdayfrom, DateUtil.parseDate(cpublishday.getTime(), DateUtil.FORMAT_DATE_CHINA));
		map.put(MapperDict.ranknum, 10);
		long start = System.currentTimeMillis();
		List<Map<?, ?>> list = dao.getCountcurr(map);
		long end = System.currentTimeMillis();
		System.out.println(end - start);
		System.out.println(list);
	}
}
