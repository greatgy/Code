package com.supergenius.web.admin.finance.controller;

import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.genius.core.base.annotation.Json;
import com.genius.core.cache.utils.MemcacheUtil;
import com.genius.core.cache.utils.RedisUtil;
import com.genius.model.base.enums.EStatus;
import com.genius.model.baseadmin.entity.AdminLog;
import com.genius.server.base.controller.BaseController;
import com.genius.server.baseadmin.helper.AdminHP;
import com.supergenius.core.rule.CommentCountTopicRule;
import com.supergenius.core.rule.TopicJoinUserRule;
import com.supergenius.core.rule.TopicLatestRule;
import com.supergenius.core.rule.TopicRankRule;
import com.supergenius.core.rule.TopicRecommendRule;
import com.supergenius.core.rule.UserTopicCommentRule;
import com.supergenius.global.conf.UriConf;
import com.supergenius.server.common.constants.MsgKeyDict;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.web.admin.finance.helper.CommentsHP;
import com.supergenius.xo.admin.enums.EAdminLog;
import com.supergenius.xo.common.enums.EChannel;
import com.supergenius.xo.user.entity.Comments;
import com.supergenius.xo.user.service.CommentsSO;

/**
 * 评论controller
 * @author liushaomin
 */
@Controller
@RequestMapping(value = UriConf.baseAdminPath)
public class CommentsAdminer extends BaseController{

	@Autowired
	private CommentsSO so;
	
	/**
	 * 进入后台评论管理页面
	 * @param model
	 * @param request
	 * @return 
	 */
	@RequestMapping(value = {"/comments"}, method = RequestMethod.GET)
	public String comments(Map<String, Object> model, HttpServletRequest request) {
		model.put(ViewKeyDict.channel, EChannel.comments.name());
		model.put(ViewKeyDict.channelname, EChannel.getName(EChannel.comments, Locale.CHINA));
		return "docomments";
	}
	
	/**
	 * 得到评论列表
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = {"ajax/comments/list"}, method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> comments_list(Map<String, Object> model, HttpServletRequest request) {
		cloneParamsToModel(model, request);
		Map<String, Object> searchMap = CommentsHP.query(model);
		return json(searchMap, Json.webStrategy);
	}
	
	/**
	 * 删除评论
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/ajax/comments/delete", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> comments_delete(String[] ids) {
		for (String item : ids) {
			Comments comments = so.get(item);
			removeMemcache(comments);
			CommentsHP.deleteSerialFile(comments.getChannel().name(), comments.getFromuid());
		}
		if (so.deleteByUids(ids)) {
			return success();
		}
		return result(MsgKeyDict.deleteFailed);
	}
	
	/**
	 * 修改评论状态
	 * @param ids
	 * @param status
	 * @param adminLog
	 * @param dopwd
	 * @return
	 */
	@RequestMapping(value = "/ajax/comments/status/{status:\\d+}", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> comments_status(String[] ids, @PathVariable int status, AdminLog adminLog, String dopwd) {
		if (AdminHP.isDopwd(dopwd)) {
			adminLog.setChannel(EChannel.comments.toInt());
			adminLog.setOperation(EAdminLog.updateCommentsStatus.getName());
			adminLog.setData(EAdminLog.updateCommentsStatus.getName());
			if (so.update(adminLog, EStatus.get(status), ids)) {
				for (String item : ids) {
					Comments comments = so.get(item);
					removeMemcache(comments);
					CommentsHP.deleteSerialFile(comments.getChannel().name(), comments.getFromuid());
				}
				return success();
			}
		} 
		return result(MsgKeyDict.updateFailed);
	}
	
	
	/**
	 * 刷新和话题相关缓存
	 * @author liushaomin
	 */
	private void removeMemcache(Comments comments) {
		MemcacheUtil.remove(new TopicJoinUserRule(comments.getFromuid()));
		MemcacheUtil.remove(new UserTopicCommentRule(comments.getFromuseruid()));
		if(comments.getChannel().equals(EChannel.topic)){
			MemcacheUtil.remove(new TopicLatestRule());
			MemcacheUtil.remove(new TopicRankRule());
			MemcacheUtil.remove(new TopicRecommendRule());
			RedisUtil.decr(new CommentCountTopicRule(comments.getFromuid()));
		}
	}

}
