package com.supergenius.web.admin.life.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.genius.core.base.annotation.Json;
import com.genius.core.base.utils.JsonUtil;
import com.genius.core.base.utils.StrUtil;
import com.genius.model.base.enums.EStatus;
import com.genius.model.baseadmin.entity.AdminLog;
import com.genius.server.base.controller.BaseController;
import com.genius.server.baseadmin.helper.AdminHP;
import com.genius.xo.baseadmin.service.AdminLogSO;
import com.supergenius.global.conf.UriConf;
import com.supergenius.server.common.constants.MsgKeyDict;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.web.admin.life.helper.LifeProblemHP;
import com.supergenius.xo.admin.enums.EAdminLog;
import com.supergenius.xo.common.constants.MapperDict;
import com.supergenius.xo.common.enums.EChannel;
import com.supergenius.xo.common.enums.ESite;
import com.supergenius.xo.life.entity.Problem;
import com.supergenius.xo.life.enums.EState;
import com.supergenius.xo.life.service.ProblemSO;

/**
 * 天才人生问题管理
 * 
 * @author JiaShitao
 * @date 2018年5月9日14:29:24
 */
@Controller
@RequestMapping(value = UriConf.baseAdminPath)
public class LifeProblemAdminer extends BaseController {

	@Autowired
	private ProblemSO so;

	@Autowired
	private AdminLogSO adminLogSO;

	/**
	 * 天才人生问题页面
	 * 
	 * @author JiaShitao
	 * @date 2018年5月9日12:21:35
	 * @return String
	 */
	@RequestMapping(value = "/life/lifeproblem", method = RequestMethod.GET)
	public String problem(Map<String, Object> model, HttpServletRequest request) {
		model.put(ViewKeyDict.channel, EChannel.lifeproblem.name());
		model.put(ViewKeyDict.channelname, EChannel.getName(EChannel.lifeproblem, Locale.CHINA));
		model.put(ViewKeyDict.site, ESite.life.name());
		Map<String, Object> map = new HashMap<>();
	    List<EStatus> liststatus = new ArrayList<>();
		liststatus.add(EStatus.enable);
		liststatus.add(EStatus.disable);
		map.put(MapperDict.statuslist, liststatus);
		model.put(ViewKeyDict.count, so.getCount());
		model.put(ViewKeyDict.rows, so.getList());
		// model.put(ViewKeyDict.catelogueList, LifeProblemHP.getCatalogueList());
		return "dolifeproblem";
	}

	/**
	 * 显示列表
	 * 
	 * @author JiaShitao
	 * @date 2018年5月9日11:50:19
	 * @return String
	 */
	@RequestMapping(value = "/life/ajax/lifeproblem/list", method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> problem_list(Map<String, Object> model, HttpServletRequest request) {
		cloneParamsToModel(model, request);
		Map<String, Object> searchMap = LifeProblemHP.query(model);
		System.out.println(searchMap);
		return json(searchMap, Json.webStrategy);
	}

	/**
	 * 冻结解冻
	 * 
	 * @param uid
	 * @param status
	 * @return
	 * @author JiaShitao
	 * @data 2018年5月10日17:17:14
	 */
	@RequestMapping(value = "/life/ajax/lifeproblem/status/{status:\\d+}", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> problem_delete(String uid, @PathVariable int status) {
		Problem problem = so.get(uid);
		String adminuid = AdminHP.getAdminUid();
		if (problem != null) {
			AdminLog adminLog = new AdminLog();
			adminLog.setAdminuid(adminuid);
			adminLog.setChannel(EChannel.lifeproblem.toInt());
			adminLog.setOperation(EAdminLog.updateLifeProblem.getName());
			adminLog.setData(EAdminLog.updateLifeProblem.getName());
			adminLog.setDesc(EAdminLog.updateLifeProblem.getName());
			adminLog.setDataid(uid);
			adminLogSO.add(adminLog);
			problem.setStatus(EStatus.get(status));
			problem.setAdminuid(adminuid);
			problem.setUpdatetime(new DateTime(DateTimeZone.forOffsetHours(8)));
			if (so.update(problem)) {
				if (EStatus.get(status) == EStatus.disable) {
					/* PuzzledProblemHP.getEngine().deleteByID(problem.getUid()); */
				} else if (EStatus.get(status) == EStatus.enable) {
					/*
					 * Map<String, Object> map = MapsUtil.toMap(problem, Maps.searchStrategy);
					 * map.put(MapperSearchDict.table, ESite.career.name());
					 * PuzzledProblemHP.getEngine().add(map);
					 */
				}
				/*
				 * Map<String, Object> map = new HashMap<>(); map.put(MapperDict.uid,
				 * problem.getUid()); PuzzledProblemHP.getEngine().delete(map);
				 */
				/*
				 * Rule rule = new LifeProblemRlue(); MemcacheUtil.remove(rule);
				 */
				return success();
			}
		}
		return result(MsgKeyDict.deleteFailed);
	}

	/**
	 * 点评/回复
	 * 
	 * @author JiaShitao
	 * @date 2018年5月15日11:15:41
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/life/ajax/lifeproblem/edit", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> content_edit(Map<String, Object> model, String uid, String infodata, String notreply, HttpServletRequest request) {
		if (StrUtil.isNotEmpty(uid)) {
			Problem problem = so.get(uid);
			if (StrUtil.isNotEmpty(infodata)) {
				List<Map<String, Object>> list = null;
				Map<String, Object> map = new HashMap<>();
				if (StrUtil.isNotEmpty(problem.getData())) {
					list = JsonUtil.fromJson(problem.getData(), List.class);
				} else {
					list = new ArrayList<>();
				}
				map.put(ViewKeyDict.useruid, ViewKeyDict.defaultuid);
				map.put(ViewKeyDict.username, ViewKeyDict.system);
				map.put(ViewKeyDict.createtime, new DateTime(DateTimeZone.forOffsetHours(8)));
				map.put(ViewKeyDict.content, infodata);
				list.add(map);
				problem.setData(JsonUtil.toJson(list));
				problem.setState(EState.over);
			} else if (StrUtil.isNotEmpty(notreply) && notreply.equals("on")) {
				problem.setState(EState.over);
			}
			if (so.update(problem)) {
				return success();
			}
		}
		return result(MsgKeyDict.doFailed);
	}

	/**
	 * 删除文章
	 * 
	 * @param ids
	 * @return
	 * @author JiaShitao
	 * @data 2018年5月11日12:30:21
	 */
	@RequestMapping(value = "/life/ajax/lifeproblem/delete", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> problem_delete(String[] ids) {
		for (String id : ids) {
			Problem problem = so.get(id);
			if (problem != null) {
				AdminLog adminLog = new AdminLog();
				adminLog.setAdminuid(AdminHP.getAdminUid());
				adminLog.setChannel(EChannel.lifeproblem.toInt());
				adminLog.setOperation(EAdminLog.updateLifeProblem.getName());
				adminLog.setData(EAdminLog.updateLifeProblem.getName());
				adminLog.setDesc(EAdminLog.updateLifeProblem.getName());
				adminLog.setDataid(ids[0]);
				adminLogSO.add(adminLog);
				problem.setStatus(EStatus.deleted);
				if (so.update(problem)) {
					/*
					 * Map<String, Object> map = new HashMap<>(); map.put(MapperDict.uid,
					 * problem.getUid()); PuzzledProblemHP.getEngine().delete(map);
					 */
					return success();
				}
			}
		}
		return result(MsgKeyDict.deleteFailed);
	}

}
