package com.supergenius.web.admin.finance.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.genius.core.base.annotation.Json;
import com.genius.core.base.annotation.Maps;
import com.genius.core.base.conf.BaseWebConf;
import com.genius.core.base.constant.BaseStrDict;
import com.genius.core.base.utils.FileUtil;
import com.genius.core.base.utils.FreemarkerUtil;
import com.genius.core.base.utils.MapsUtil;
import com.genius.core.cache.rule.Rule;
import com.genius.core.cache.utils.MemcacheUtil;
import com.genius.core.search.constant.MapperSearchDict;
import com.genius.model.base.entity.Pager;
import com.genius.model.base.enums.EStatus;
import com.genius.model.baseadmin.entity.AdminLog;
import com.genius.server.base.controller.BaseController;
import com.genius.server.baseadmin.helper.AdminHP;
import com.supergenius.core.rule.DebateHistoryRlue;
import com.supergenius.global.conf.SysConf;
import com.supergenius.global.conf.UriConf;
import com.supergenius.global.conf.WebConf;
import com.supergenius.server.common.constants.MsgKeyDict;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.server.finance.helper.BaseDebateHP;
import com.supergenius.web.admin.finance.helper.DebateArticleHP;
import com.supergenius.web.admin.finance.helper.DebateHP;
import com.supergenius.xo.admin.enums.EAdminLog;
import com.supergenius.xo.common.enums.EChannel;
import com.supergenius.xo.finance.entity.Debate;
import com.supergenius.xo.finance.entity.DebateArticle;
import com.supergenius.xo.finance.service.DebateSO;

/**
 * 论战控制器
 * @author ShangJianguo
 */
@Controller
@RequestMapping(value = UriConf.baseAdminPath)
public class DebateAdminer extends BaseController{
	
	@Autowired
	private DebateSO so;
	
	/**
	 * 跳转到论战管理页面
	 * @param model
	 * @param request
	 * @return
	 * @author ShangJianguo
	 */
	@RequestMapping(value = {"/debate"}, method = RequestMethod.GET)
	public String debate(Map<String, Object> model, HttpServletRequest request) {
		model.put(ViewKeyDict.channel, EChannel.debate.name());
		model.put(ViewKeyDict.channelname, EChannel.getName(EChannel.debate, Locale.CHINA));
		return "dodebate";
	}
	
	/**
	 * 加载论战列表 
	 * @param model
	 * @param request
	 * @return
	 * @author ShangJianguo
	 */
	@RequestMapping(value = "/ajax/debate/list", method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> debate_list(Map<String, Object> model, HttpServletRequest request) {
		cloneParamsToModel(model, request);
		Map<String, Object> map = DebateHP.query(model);
		return json(map, Json.webStrategy);
	}

	/**
	 * 添加论战
	 * @param debate
	 * @param file
	 * @param articles
	 * @return
	 * @author ShangJianguo
	 */
	@RequestMapping(value = "/ajax/debate/add", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> debate_add(Debate debate, String file, String[] articles, HttpServletRequest request) {
		if (StringUtils.isNotEmpty(file)) {
			String[] imgs = file.split(BaseStrDict.comma);
			debate.setImgs(imgs);
		}
		debate.setAdminuid(AdminHP.getAdminUid());
		List<DebateArticle> articleList = DebateArticleHP.getArticleList(articles, AdminHP.getAdminUid());
		if (so.addDebateWithArticle(debate, articleList)) {
			SerialFile(request);
			removeCache();
			Map<String, Object> map = MapsUtil.toMap(debate, Maps.searchStrategy);
			map.put(MapperSearchDict.table, EChannel.debate.name());
			DebateHP.getEngine().add(map);
			return result(MsgKeyDict.addSuccess);
		}else {
			return result(MsgKeyDict.addFailed);
		}
	}
	
	/**
	 * 编辑论战
	 * @param debate
	 * @param file
	 * @return
	 * @author ShangJianguo
	 */
	@RequestMapping(value = "/ajax/debate/edit", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> debate_edit(Debate debate, String file, HttpServletRequest request) {
		if (StringUtils.isNotEmpty(file)) {
			debate.setImgs(file.split(ViewKeyDict.comma));
		}
		if (so.update(debate)) {
			SerialFile(request);
			removeCache();
			debate = so.get(debate.getUid());
			if (EStatus.enable.equals(debate.getStatus())) {
				Map<String, Object> map = MapsUtil.toMap(debate, Maps.searchStrategy);
				map.put(MapperSearchDict.table, EChannel.debate.name());
				DebateHP.getEngine().add(map);
			}
			return result(MsgKeyDict.editSuccess);
		}else {
			return result(MsgKeyDict.editFailed);
		}
	}
	
	/**
	 * 删除论战
	 * @param ids
	 * @return
	 * @author ShangJianguo
	 */
	@RequestMapping(value = "/ajax/debate/delete", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> debate_delete(String[] ids, HttpServletRequest request) {
		if(so.delete(ids)){
			SerialFile(request);
			removeCache();
			DebateHP.getEngine().deleteByID(ids);
			return success();
		}else{
			return result(MsgKeyDict.deleteFailed);
		}
	}
	
	/**
	 * 更新论战状态
	 * @param ids
	 * @param status
	 * @param adminLog
	 * @param dopwd
	 * @return
	 * @author ShangJianguo
	 */
	@RequestMapping(value = "/ajax/debate/status/{status:\\d+}", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> debate_status(String[] ids, @PathVariable int status, AdminLog adminLog, String dopwd, HttpServletRequest request) {
		if (AdminHP.isDopwd(dopwd)) {
			adminLog.setChannel(EChannel.debate.toInt());
			adminLog.setOperation(EAdminLog.updateDebateStatus.getName());
			adminLog.setData(EAdminLog.updateDebateStatus.getName());
			if (so.update(adminLog, EStatus.get(status), ids)) {
				SerialFile(request);
				removeCache();
				if (EStatus.enable.equals(EStatus.get(status))) {
					List<Map<String, Object>> maps = new ArrayList<>();
					for (int i = 0; i < ids.length; i++) {
						Debate debate = so.get(ids[i]);
						Map<String, Object> map = MapsUtil.toMap(debate, Maps.searchStrategy);
						map.put(MapperSearchDict.table, EChannel.debate.name());
						maps.add(map);
					}
					DebateHP.getEngine().addBatch(maps);
				} else {
					DebateHP.getEngine().deleteByID(ids);
				}
				return success();
			}else {
				return result(MsgKeyDict.editFailed);
			}
		} else {
			return result(MsgKeyDict.updateFailed);
		}
	}
	
	/**
	 * 更新论战进度
	 * @param ids
	 * @param state
	 * @return
	 * @author ShangJianguo
	 */
	@RequestMapping(value = "/ajax/debate/state/{state:\\d+}", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> debate_state(String[] ids, @PathVariable int state, HttpServletRequest request) {
		if(so.updateState(ids, state)){
			SerialFile(request);
			removeCache();
			return result(MsgKeyDict.editSuccess);
		}else {
			return result(MsgKeyDict.editFailed);
		}
	}
	
	/**
	 * 清空缓存 
	 * @author ShangJianguo
	 */
	private static void removeCache(){
		Rule rule = new DebateHistoryRlue();
		MemcacheUtil.remove(rule);
		BaseDebateHP.removeCurDebateCache();
	}
	
	/**
	 * 重新生成文件 
	 * @param request
	 * @author liushaomin
	 */
	private void SerialFile(HttpServletRequest request){
		try {
			FileUtil.delete(SysConf.FileSiteBasePath + SysConf.FileDebatePath);
			List<Debate> list = so.getList(new Pager(1, WebConf.OfficialIndexDebateSize));
			Map<String, Object> model = new HashMap<String, Object>();
			model.putAll(BaseWebConf.getBasePath(request.getContextPath()));
			Debate debate = so.getCurDebate();
			debate = DebateHP.setArticles(debate);
			model.put(ViewKeyDict.bean, debate);
			model.put(ViewKeyDict.list, list);
			model.put(ViewKeyDict.baseFinancePath, WebConf.baseFinancePath);
			model.put(ViewKeyDict.baseOfficialImg, WebConf.baseOfficialImg);
			File file = new File(SysConf.FileSiteBasePath + SysConf.FileDebatePath);
			FreemarkerUtil.process(SysConf.OfficialIndexTemplatePath, SysConf.HtmlDebateData, model, file);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
}
