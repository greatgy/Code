package com.supergenius.web.admin.finance.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.genius.core.base.annotation.Json;
import com.genius.core.base.annotation.Maps;
import com.genius.core.base.conf.BaseWebConf;
import com.genius.core.base.constant.BaseStrDict;
import com.genius.core.base.utils.DateUtil;
import com.genius.core.base.utils.FileUtil;
import com.genius.core.base.utils.FreemarkerUtil;
import com.genius.core.base.utils.MapsUtil;
import com.genius.core.base.utils.StrUtil;
import com.genius.core.cache.utils.MemcacheUtil;
import com.genius.core.search.constant.MapperSearchDict;
import com.genius.model.base.entity.Pager;
import com.genius.model.base.enums.EStatus;
import com.genius.model.baseadmin.entity.AdminLog;
import com.genius.server.base.controller.BaseController;
import com.genius.server.baseadmin.helper.AdminHP;
import com.supergenius.core.rule.TopicLatestRule;
import com.supergenius.core.rule.TopicMaxCommentRule;
import com.supergenius.core.rule.TopicRankRule;
import com.supergenius.core.rule.TopicRecommendRule;
import com.supergenius.core.rule.UserTopicCommentRule;
import com.supergenius.core.rule.UserTopicCountRule;
import com.supergenius.global.conf.SysConf;
import com.supergenius.global.conf.UriConf;
import com.supergenius.global.conf.WebConf;
import com.supergenius.server.common.constants.MsgKeyDict;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.web.admin.finance.helper.InboxHP;
import com.supergenius.web.admin.finance.helper.TopicGuestHP;
import com.supergenius.web.admin.finance.helper.TopicHP;
import com.supergenius.xo.admin.enums.EAdminLog;
import com.supergenius.xo.common.constants.MapperDict;
import com.supergenius.xo.common.enums.EChannel;
import com.supergenius.xo.finance.entity.Topic;
import com.supergenius.xo.finance.entity.UserStatistics;
import com.supergenius.xo.finance.enums.ETopicState;
import com.supergenius.xo.finance.service.TopicSO;
import com.supergenius.xo.finance.service.UserStatisticsSO;

/**
 * 话题相关controller
 * @author liushaomin
 */
@Controller
@RequestMapping(value = UriConf.baseAdminPath)
public class TopicAdminer extends BaseController {

	@Autowired
	private TopicSO so;

	@Autowired
	private UserStatisticsSO statisticsSO;

	/**
	 * 进入后台topic管理页面
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = { "/topic" }, method = RequestMethod.GET)
	public String topic(Map<String, Object> model, HttpServletRequest request) {
		model.put(ViewKeyDict.channel, EChannel.topic.name());
		model.put(ViewKeyDict.channelname, EChannel.getName(EChannel.topic, Locale.CHINA));
		return "dotopic";
	}

	/**
	 * 得到topic列表
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = { "ajax/topic/list" }, method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> topic_list(Map<String, Object> model, HttpServletRequest request) {
		cloneParamsToModel(model, request);
		Map<String, Object> searchMap = TopicHP.query(model);
		return json(searchMap, Json.webStrategy);
	}

	/**
	 * 删除topic
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/ajax/topic/delete", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> topic_delete(String[] ids, HttpServletRequest request) {
		Topic[] topics = new Topic[ids.length];
		for (String item : ids) {
			Topic topic = so.get(item);
			for (int i = 0; i < ids.length; i++) {
				topics[i] = topic;
			}
			if (EStatus.enable.equals(topic.getStatus()) && StrUtil.isNotEmpty(topic.getUseruid())) {
				UserStatistics statistics = statisticsSO.obtainOne(topic.getUseruid());
				int number = statistics.getTopiccount();
				if (number <= 0) {
					number = so.getAuthorTopicCount(topic.getUseruid());
				}
				number = (number - ids.length) >= 0 ? (number - ids.length) : 0;
				statisticsSO.update(statistics.getUid(), number, MapperDict.topiccount);
			}
			removeMemcache(topic);
		}
		if (so.deleteByUids(ids)) {
			InboxHP.sendInboxByMsg(InboxHP.sendDeletedMsg(topics, null));
			SerialFile(request);
			TopicHP.getEngine().deleteByID(ids);
			return success();
		}
		return result(MsgKeyDict.deleteFailed);
	}

	/**
	 * 编辑topic，同时修改topic进度
	 * @param file
	 * @param topic
	 * @param result
	 * @return
	 */
	@RequestMapping(value = "/ajax/topic/edit", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> topic_topic(String file, Topic newtopic, String result, HttpServletRequest request) {
		if (result.equals(ETopicState.succeed.toString())) {
			newtopic.setState(ETopicState.succeed);
			newtopic.setPublishtime(DateUtil.NowTime());
		} else {
			newtopic.setState(ETopicState.failed);
		}
		if (file != null) {
			String[] imgs = file.split(BaseStrDict.comma);
			newtopic.setimgs(imgs);
		}
		if (so.update(newtopic)) {
			Topic topic = so.get(newtopic.getUid());
			SerialFile(request);
			removeMemcache(topic);
			InboxHP.sendInboxByMsg(TopicHP.sendTopicMsg(topic, result));
			if (EStatus.enable.equals(topic.getStatus()) && ETopicState.succeed.equals(topic.getState())) {
				Map<String, Object> map = MapsUtil.toMap(topic, Maps.searchStrategy);
				map.put(MapperSearchDict.table, EChannel.topic.name());
				TopicHP.getEngine().add(map);
			} else {
				TopicHP.getEngine().deleteByID(topic.getUid());
			}
			return success();
		}
		return result(MsgKeyDict.updateFailed);
	}

	/**
	 * 设置置顶
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/ajax/topic/enable", method = RequestMethod.GET)
	@ResponseBody
	@Deprecated
	public Map<String, Object> topic_top(String[] ids) {
		if (so.setTop(ids, true)) {
			return success();
		}
		return result(MsgKeyDict.updateFailed);
	}

	/**
	 * 取消置顶
	 * @param id
	 * @return
	 * @author liushaomin
	 */
	@RequestMapping(value = "/ajax/topic/disable", method = RequestMethod.GET)
	@ResponseBody
	@Deprecated
	public Map<String, Object> topic_untop(String[] ids) {
		if (so.setTop(ids, false)) {
			return success();
		}
		return result(MsgKeyDict.updateFailed);
	}

	/**
	 * 设置为推荐
	 * @param ids
	 * @return
	 * @author liushaomin
	 */
	@RequestMapping(value = "/ajax/topic/isrecommend", method = RequestMethod.GET)
	@ResponseBody
	@Deprecated
	public Map<String, Object> topic_isrecommend(String[] ids) {
		if (so.setRecommend(ids, true)) {
			return success();
		}
		return result(MsgKeyDict.updateFailed);
	}

	/**
	 * 取消推荐
	 * @param ids
	 * @return
	 * @author liushaomin
	 */
	@RequestMapping(value = "/ajax/topic/unrecommend", method = RequestMethod.GET)
	@ResponseBody
	@Deprecated
	public Map<String, Object> topic_unrecommend(String[] ids) {
		if (so.setRecommend(ids, false)) {
			return success();
		}
		return result(MsgKeyDict.updateFailed);
	}

	/**
	 * 修改topic状态
	 * @param ids
	 * @param status
	 * @param adminLog
	 * @param dopwd
	 * @return
	 */
	@RequestMapping(value = "/ajax/topic/status/{status:\\d+}", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> topic_status(String[] ids, @PathVariable int status, AdminLog adminLog, String dopwd, HttpServletRequest request) {
		if (AdminHP.isDopwd(dopwd)) {
			adminLog.setChannel(EChannel.topic.toInt());
			adminLog.setOperation(EAdminLog.updateTopicStatus.getName());
			adminLog.setData(EAdminLog.updateTopicStatus.getName());
			if (so.update(adminLog, EStatus.get(status), ids)) {
				SerialFile(request);
				List<Map<String, Object>> maps = new ArrayList<>();
				Map<String, Object> map;
				for (String id : ids) {
					Topic topic = so.get(id);
					if (StrUtil.isNotEmpty(topic.getUseruid())) {
						UserStatistics statistics = statisticsSO.obtainOne(topic.getUseruid());
						int number = statistics.getTopiccount();
						if (number <= 0) {
							number = so.getAuthorTopicCount(topic.getUseruid());
						} else {
							if (EStatus.enable.equals(EStatus.get(status))) {
								number = number + ids.length;
							} else {
								number = (number - ids.length) >= 0 ? (number - ids.length) : 0;
							}
						}
						statisticsSO.update(statistics.getUid(), number, MapperDict.topiccount);
					}
					map = MapsUtil.toMap(topic, Maps.searchStrategy);
					map.put(MapperSearchDict.table, EChannel.topic.name());
					maps.add(map);
				}
				removeMemcache();
				if (EStatus.enable.equals(EStatus.get(status))) {
					TopicHP.getEngine().addBatch(maps);
				} else {
					TopicHP.getEngine().deleteByID(ids);
				}
				return success();
			}
		}
		return result(MsgKeyDict.updateFailed);
	}

	/**
	 * 得到某个话题的所有嘉宾
	 * @param model
	 * @param request
	 * @param topicuid
	 * @return
	 */
	@RequestMapping(value = { "ajax/topic/guest/list" }, method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> topicguest_list(Map<String, Object> model, HttpServletRequest request, String topicuid) {
		cloneParamsToModel(model, request);
		model.put(ViewKeyDict.topicuid, topicuid);
		Map<String, Object> searchMap = TopicGuestHP.query(model);
		return json(searchMap, Json.webStrategy);
	}

	/**
	 * 刷新和用户相关的缓存
	 * @param topic
	 */
	private void removeMemcache(Topic topic) {
		MemcacheUtil.remove(new UserTopicCountRule(topic.getUseruid()));
		MemcacheUtil.remove(new UserTopicCommentRule(topic.getUseruid()));
		removeMemcache();
	}

	/**
	 * 刷新和话题相关缓存
	 * @author liushaomin
	 */
	private void removeMemcache() {
		MemcacheUtil.remove(new TopicMaxCommentRule());
		MemcacheUtil.remove(new TopicLatestRule());
		MemcacheUtil.remove(new TopicRankRule());
		MemcacheUtil.remove(new TopicRecommendRule());
	}

	/**
	 * 重新生成文件
	 * @author liushaomin
	 */
	private void SerialFile(HttpServletRequest request) {
		try {
			FileUtil.delete(SysConf.FileSiteBasePath + SysConf.FileTopicPath);
			List<Topic> topics = so.getList(new Pager(1, WebConf.OfficialIndexTopicSize), ETopicState.succeed);
			Map<String, Object> model = new HashMap<String, Object>();
			model.putAll(BaseWebConf.getBasePath(request.getContextPath()));
			model.put(ViewKeyDict.list, topics);
			model.put(ViewKeyDict.baseFinancePath, WebConf.baseFinancePath);
			File file = new File(SysConf.FileSiteBasePath + SysConf.FileTopicPath);
			FreemarkerUtil.process(SysConf.OfficialIndexTemplatePath, SysConf.HtmlTopicData, model, file);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
