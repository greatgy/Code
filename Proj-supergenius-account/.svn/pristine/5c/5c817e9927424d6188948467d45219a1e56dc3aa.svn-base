package com.supergenius.web.account.helper;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alipay.api.AlipayApiException;
import com.alipay.api.AlipayClient;
import com.alipay.api.DefaultAlipayClient;
import com.alipay.api.domain.AlipayTradeRefundModel;
import com.alipay.api.request.AlipayTradeRefundRequest;
import com.alipay.api.response.AlipayTradeRefundResponse;
import com.genius.core.base.utils.JsonUtil;
import com.genius.core.base.utils.StrUtil;
import com.genius.server.base.helper.BaseHP;
import com.supergenius.global.conf.SysConf;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.third.alipay.config.AlipayConfig;
import com.supergenius.xo.account.entity.Account;
import com.supergenius.xo.account.entity.Refund;
import com.supergenius.xo.account.enums.EBank;
import com.supergenius.xo.account.enums.ERefundState;
import com.supergenius.xo.account.service.AccountSO;
import com.supergenius.xo.account.service.RefundSO;

/**
 * 退款
 * 
 * @author YangGuang
 */
public class RefundHP extends BaseHP {

	private static Logger log = LoggerFactory.getLogger(RefundHP.class);
	
	private static AccountSO so;
	
	private static RefundSO refundSO;
	
	private static AccountSO getSO() {
		if (so == null) {
			so = (AccountSO) spring.getBean(AccountSO.class);
		}
		return so;
	}
	
	private static RefundSO getRefundSO() {
		if (refundSO == null) {
			refundSO = (RefundSO) spring.getBean(RefundSO.class);
		}
		return refundSO;
	}

	/**
	 * 退款
	 * 
	 * @param account
	 * @param money 退款金额（必须小于account的金额）
	 * @return
	 * @author YangGuang
	 * @throws AlipayApiException
	 */
	public static String refund(Account account, Refund refund, double money, Map<String, Object> result) throws AlipayApiException {
		String refund_money;
		if (StrUtil.isNotEmpty(money)) {
			if (money > account.getMoney()) {
				log.info("money is false");
				result.put(ViewKeyDict.result, 3);
				return JsonUtil.toJson(result);
			}
			refund_money = String.valueOf(money);
		} else {
			refund_money = String.valueOf(account.getMoney());
		}
		if (account.getBank() == EBank.alipay) {
			AlipayClient alipayClient = new DefaultAlipayClient(AlipayConfig.refundUrl, SysConf.AlipayAppid, SysConf.AlipayPrivateKey, "json", "UTF-8", SysConf.AlipayPublicKey,
					AlipayConfig.refund_sign_type);
			AlipayTradeRefundModel model = new AlipayTradeRefundModel();
			model.setOutTradeNo(account.getAccountsn());
			model.setRefundAmount(refund_money);
			model.setOutRequestNo(account.getUid());//部分退款此参数必传
			AlipayTradeRefundRequest request = new AlipayTradeRefundRequest();
			request.setBizModel(model);
			AlipayTradeRefundResponse response = alipayClient.execute(request);
			System.out.println("fund change -----------------------------:"+response.getFundChange());
			System.out.println("refund result -----------------------------:"+response.getMsg());
			if (response.isSuccess()) {
				if (response.getMsg().equals("Success")) {
					refund.setState(ERefundState.success);
					getRefundSO().update(refund);
					if (response.getFundChange().equalsIgnoreCase("Y")) {
						account.setAvailable(account.getMoney() - Double.parseDouble(refund_money));
						getSO().update(account);
					}
					log.info("refund is success");
					result.put(ViewKeyDict.result, 1);
					return JsonUtil.toJson(result);
				}
			}
		}
		log.info("refund is fail");
		result.put(ViewKeyDict.result, 3);
		return JsonUtil.toJson(result);
	}

}
