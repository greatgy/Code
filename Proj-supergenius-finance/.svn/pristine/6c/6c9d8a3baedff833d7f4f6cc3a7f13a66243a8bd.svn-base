package com.supergenius.web.finance.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.genius.core.base.constant.BaseStrDict;
import com.genius.core.base.utils.CookieUtil;
import com.genius.core.base.utils.StrUtil;
import com.genius.core.base.utils.WebUtil;
import com.genius.model.base.entity.Pager;
import com.genius.server.base.controller.BaseController;
import com.supergenius.global.conf.SysConf;
import com.supergenius.global.conf.WebConf;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.server.user.helper.BaseUserHP;
import com.supergenius.web.finance.helper.CollectDetailHP;
import com.supergenius.web.finance.helper.CommentsHP;
import com.supergenius.web.finance.helper.FinanceHP;
import com.supergenius.web.finance.helper.SubscribeHP;
import com.supergenius.web.finance.helper.TopicHP;
import com.supergenius.web.finance.helper.UserHP;
import com.supergenius.xo.common.enums.EChannel;
import com.supergenius.xo.finance.entity.Topic;
import com.supergenius.xo.finance.enums.ECollectType;
import com.supergenius.xo.finance.enums.ETopicState;
import com.supergenius.xo.finance.service.TopicGuestSO;
import com.supergenius.xo.finance.service.TopicSO;
import com.supergenius.xo.user.entity.User;
import com.supergenius.xo.user.entity.Visitor;
import com.supergenius.xo.user.enums.EComment;
import com.supergenius.xo.user.service.UserSO;

/**
 * 话题controller
 * @author liushaomin
 */
@Controller
public class TopicController extends BaseController {

	@Autowired
	private TopicSO so;

	@Autowired
	private TopicGuestSO topicguestSO;

	@Autowired
	private UserSO userSO;

	/**
	 * 打开话题页面
	 * @param model
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = { "/topic" }, method = RequestMethod.GET)
	public String topic(Map<String, Object> model, HttpServletRequest request) {
		List<Topic> toplist = TopicHP.getList(WebConf.TopicPageSize);
		if (toplist.size() > WebConf.TopicIndexRotateSize) {
			toplist = toplist.subList(0, WebConf.TopicIndexRotateSize);
		}
		model.put(ViewKeyDict.toplist, toplist);
		model.put(ViewKeyDict.recommendlist, TopicHP.getRecommendTopic());
		model.put(ViewKeyDict.topicrank, TopicHP.getListByTopicRankFromMC(EChannel.topic, EComment.comment));
		model.put(ViewKeyDict.list, TopicHP.getList(WebConf.TopicPageSize));
		model.put(ViewKeyDict.activeUsers, TopicHP.getActiveUser());
		model.put(ViewKeyDict.newestcomments, CommentsHP.getNewestComments(null, EChannel.topic, EComment.comment, WebConf.NewestCommentsCount));
		User user = BaseUserHP.getCurrUser(request);
		if (user != null) {
			model.put(ViewKeyDict.count, TopicHP.getAuthorTopicCount(user.getUid()));
			model.put(ViewKeyDict.count2, TopicHP.getAuthorTopicJoinCount(user.getUid()));
		}
		return "topic";
	}

	/**
	 * 加载更多话题
	 * @param model
	 * @param pagenum
	 * @param request
	 * @return
	 */
	@RequestMapping(value = { "/ajax/topic" }, method = RequestMethod.GET)
	public String topic_more(Map<String, Object> model, Integer pagenum, HttpServletRequest request) {
		if (pagenum == null) {
			pagenum = 1;
		}
		Pager pager = Pager.getNewInstance(pagenum, WebConf.TopicPageSize);
		model.put(ViewKeyDict.list, TopicHP.getList(pager));
		model.put(ViewKeyDict.type, ViewKeyDict.topicindex);
		return "ajaxtopics";
	}

	/**
	 * 随机话题
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = { "/topic/random" }, method = RequestMethod.GET)
	public String randomtopic(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) {
		return redirectPrefix + "/topic/" + so.getRandomOid();
	}

	/**
	 * 进入发起话题（只有会员可以发起）
	 * @param model
	 * @param oid
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = { "/topic/apply" }, method = RequestMethod.GET)
	public String topic_apply(Map<String, Object> model, HttpServletRequest request) {
		User user = BaseUserHP.getCurrUser(request);
		if (user != null) {
			return "topicapply";
		}
		return redirectPrefix + WebConf.LoginURL;
	}

	/**
	 * 提交话题
	 * @param model
	 * @param request
	 * @param topic
	 * @return
	 */
	@RequestMapping(value = { "/topic/apply" }, method = RequestMethod.POST)
	public String topic_apply(Map<String, Object> model, HttpServletRequest request, Topic topic, String topicimg) {
		User user = BaseUserHP.getCurrUser(request);
		if (user != null) {
			boolean flag = true;
			if (StringUtils.isEmpty(topic.getTitle()) || StringUtils.isEmpty(topic.getContent())) {
				flag = false;
			}
			if (flag) {
				if (StrUtil.isNotEmpty(topicimg)) {
					String[] imgs = topicimg.split(BaseStrDict.comma);
					topic.setimgs(imgs);
				}
				topic.setTitle(WebUtil.clearXSS(topic.getTitle()));
				topic.setContent(WebUtil.clearXSS(topic.getContent()));
				topic.setUseruid(user.getUid());
				topic.setAuthor(user.getShowname());
				topic.setState(ETopicState.init);
				if (so.add(topic)) {
					return redirectPrefix + "/topic/applyresult";
				}
			}
			model.put(ViewKeyDict.title, topic.getTitle());
			model.put(ViewKeyDict.content, topic.getContent());
			return topic_apply(model, request);
		} else {
			return redirectPrefix + WebConf.LoginURL;
		}
	}

	/**
	 * 提交话题结果页
	 * @param model
	 * @param request
	 * @param topic
	 * @return
	 */
	@RequestMapping(value = { "/topic/applyresult" }, method = RequestMethod.GET)
	public String topicapply_result(Map<String, Object> model, HttpServletRequest request) {
		return "applyresult";
	}

	/**
	 * 话题详情
	 * @param model
	 * @param request
	 * @param oid
	 * @param response
	 * @return
	 */
	@RequestMapping(value = { "/topic/{oid:\\d+}" }, method = RequestMethod.GET)
	public String topicoid(Map<String, Object> model, HttpServletRequest request, @PathVariable Integer oid, HttpServletResponse response) {
		Topic topic = so.get(oid);
		String meuid;
		if (topic == null || topic.getState() != ETopicState.succeed) {
			return response404(response);
		}
		topic = TopicHP.getUserFromTopic(topic);
		User user = BaseUserHP.getCurrUser(request);
		if (user != null) {
			meuid = user.getUid();
			List<String> prizes = UserHP.getListPrize(user);
			for (String item : prizes) {
				if (topic.getUid().equals(item)) {
					topic.setIsprize(true);
					break;
				}
			}
		} else {
			Visitor visitor = CommentsHP.getVisitor(request, response);
			meuid = visitor.getUid();
			Cookie cookie = CookieUtil.getCookie(request, EChannel.topic.name() + topic.getUid() + ViewKeyDict.prizefinance);
			if (cookie != null) {
				topic.setIsprize(true);
			}
		}
		if (user != null) {
			topic.setIscollect(CollectDetailHP.isCollect(user.getUid(), ECollectType.topic, topic.getUid()));
		}
		TopicHP.incrClickCount(request, response, topic, user);
		model.put(ViewKeyDict.issubscribe, SubscribeHP.isSubscribe(meuid, topic.getUseruid()));// 是否订阅
		model.put(ViewKeyDict.collect, ECollectType.topic.name());
		model.put(ViewKeyDict.articleCount, FinanceHP.getAuthorArticleCount(topic.getUseruid()));
		model.put(ViewKeyDict.topicCount, TopicHP.getAuthorTopicCount(topic.getUseruid()));
		model.put(ViewKeyDict.bean, topic);
		model.put(ViewKeyDict.author, userSO.get(topic.getUseruid()));
		model.put(ViewKeyDict.topicrank, TopicHP.getListByTopicRankFromMC(EChannel.topic, EComment.comment));
		model.put(ViewKeyDict.list, topicguestSO.getList(topic.getUid()));
		model.put(ViewKeyDict.list2, TopicHP.getCommentUser(topic.getUid()));
		model.put(ViewKeyDict.wonderfullist, CommentsHP.getCommentsFromPraise(topic.getUid(), EChannel.topic, EComment.comment, SysConf.TopicCommentRankNum));
		return "topicoid";
	}

	/**
	 * ajax获取与我相关的话题评论
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/ajax/mytopic/comments/join/{oid:\\d+}", method = RequestMethod.GET)
	public String ajaxtopiccomments_join(Map<String, Object> model, @PathVariable Integer oid, Integer pagenum, HttpServletRequest request) {
		User user = BaseUserHP.getCurrUser(request);
		if (user == null) {
			return redirectPrefix + WebConf.LoginURL;
		}
		if (pagenum == null) {
			pagenum = 1;
		}
		Topic topic = so.get(oid);
		Pager pager = Pager.getNewInstance(pagenum, WebConf.TopicCommentPageSize);
		model.put(ViewKeyDict.list, CommentsHP.getTopicComments(pager, user.getUid(), topic.getUid()));
		model.put(ViewKeyDict.type, ViewKeyDict.topic);
		return "ajaxcomments";
	}

}
