package com.supergenius.web.finance.helper;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.genius.core.base.annotation.Json;
import com.genius.core.base.utils.CookieUtil;
import com.genius.core.base.utils.DateUtil;
import com.genius.core.base.utils.JsonUtil;
import com.genius.core.base.utils.StrUtil;
import com.genius.core.cache.rule.Rule;
import com.genius.core.cache.utils.MemcacheUtil;
import com.genius.core.cache.utils.RedisUtil;
import com.genius.core.serial.utils.SerialUtil;
import com.genius.model.base.entity.Pager;
import com.genius.model.base.enums.EStatus;
import com.supergenius.core.rule.ClickCountArticleRule;
import com.supergenius.core.rule.FinanceLatestRule;
import com.supergenius.core.rule.FinanceRankRule;
import com.supergenius.core.rule.FinanceRecommendRule;
import com.supergenius.core.rule.UserArticleClickCountRule;
import com.supergenius.core.rule.UserArticleCountRule;
import com.supergenius.global.conf.SysConf;
import com.supergenius.global.conf.WebConf;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.xo.common.constants.MapperDict;
import com.supergenius.xo.common.enums.EChannel;
import com.supergenius.xo.finance.entity.Contribute;
import com.supergenius.xo.finance.entity.CountDetail;
import com.supergenius.xo.finance.entity.Finance;
import com.supergenius.xo.finance.entity.UserStatistics;
import com.supergenius.xo.finance.enums.EContributeState;
import com.supergenius.xo.finance.enums.ECountType;
import com.supergenius.xo.finance.enums.EFinance;
import com.supergenius.xo.finance.service.ContributeSO;
import com.supergenius.xo.finance.service.ContributorSO;
import com.supergenius.xo.finance.service.CountDetailSO;
import com.supergenius.xo.finance.service.FinanceSO;
import com.supergenius.xo.finance.service.UserStatisticsSO;
import com.supergenius.xo.user.entity.Comments;
import com.supergenius.xo.user.entity.User;
import com.supergenius.xo.user.enums.EComment;

/**
 * 天财评论HP
 * @author ShangJianguo
 */
public class FinanceHP extends com.supergenius.server.finance.helper.BaseFinanceHP{
	
	private static Logger log = LoggerFactory.getLogger(FinanceHP.class);

	private static FinanceSO so;
	
	private static UserStatisticsSO statisticsSO;
	
	public static FinanceSO getSo() {
		if (so == null) {
			so = (FinanceSO) spring.getBean(FinanceSO.class);
		}
		return so;
	}
	
	private static UserStatisticsSO getUserStatisticsSO() {
		if (statisticsSO == null) {
			statisticsSO = (UserStatisticsSO) spring.getBean(UserStatisticsSO.class);
		}
		return statisticsSO;
	}
	
	private static CountDetailSO countDetailSO;
	
	public static CountDetailSO getCountDetailSO() {
		if (countDetailSO == null) {
			countDetailSO = (CountDetailSO) spring.getBean(CountDetailSO.class);
		}
		return countDetailSO;
	}

	private static ContributeSO contributeSO;
	
	public static ContributeSO getContributeSO() {
		if (contributeSO == null) {
			contributeSO = (ContributeSO) spring.getBean(ContributeSO.class);
		}
		return contributeSO;
	}
	
	private static ContributorSO contributorSO;
	
	public static ContributorSO getContributorSO() {
		if (contributorSO == null) {
			contributorSO = (ContributorSO) spring.getBean(ContributorSO.class);
		}
		return contributorSO;
	}
	
	/**
	 * 获取某个用户的文章所有浏览数
	 * @param useruid
	 * @return
	 * @author ShangJianguo
	 */
	public static int getReadCount(String useruid){
		Rule rule = new UserArticleClickCountRule(useruid, SysConf.Expire_UserArticleClickCount);
		int count = 0;
		try {
			Object cacheCount = MemcacheUtil.get(rule);
			if (cacheCount != null) {
				count = Integer.parseInt(cacheCount.toString());
				return count;
			}
		} catch (Exception e) {
			logException(log, e);
		}
		List<Finance> list = getSo().getList(useruid, null, null);
		if (list == null || list.size() == 0) {
			return count;
		}
		List<String> refuidList = new ArrayList<>();
		for (Finance item : list) {
			refuidList.add(item.getUid());
		}
		count = getCountDetailSO().getReadCount(EChannel.finance, ECountType.click, refuidList);
		MemcacheUtil.set(rule, count);
		return count;
	}
	
	/**
	 * 获取72小时内点赞数最多的三篇文章
	 * @return
	 * @author ShangJianguo
	 */
	public static List<Finance> getRecommendFinance() {
		Rule rule = new FinanceRecommendRule(ViewKeyDict.all, SysConf.Expire_FinanceRecommend);
		List<Finance> financeList = getFinanceListFromMC(rule);
		if (financeList != null) {
			return financeList;					
		}else {
			financeList = new ArrayList<>();
		}
		List<String> fromuid = CommentsHP.getRankUid(EChannel.finance, EComment.praise, SysConf.FinancePraisehour, SysConf.FinanceListNum, null);
		Finance finance = null;
		for (String item : fromuid) {
			finance = getSo().get(item);
			financeList.add(finance);
		}
		if (financeList != null && financeList.size() > 0) {
			MemcacheUtil.set(rule, financeList);
		}else{// 若无推荐文章，则获取最新的文章
			financeList = FinanceHP.getLatest(null, 1, WebConf.FinancePageSize);
			if (financeList.size() > SysConf.FinanceListNum) {
				return financeList.subList(0, SysConf.FinanceListNum);
			}
		}
		return financeList;
	}
	
	/**
	 * 根据投稿列表获取其中所有已经通过的文章列表
	 * @return
	 * @author ShangJianguo
	 */
	public static List<Finance> getAcceptedFinances(List<Contribute> list){
		List<String> uids = new ArrayList<>();// 存储所有已经通过的稿子的uid
		for (Contribute item : list) {
			if (item.getState().equals(EContributeState.accept)) {
				uids.add(item.getUid());
			}
		}
		List<Finance> financeList = new ArrayList<>();
		if (uids.size() != 0) {
			financeList = getSo().getList(list.get(0).getUseruid(), null, uids, null);
		}
		return financeList;
	}
	
	/**
	 * 根据投稿列表获取文章列表
	 * @return
	 * @author ShangJianguo
	 */
	public static List<Finance> getEContributeStateFinances(List<Contribute> list, EStatus status){
		List<String> uids = new ArrayList<>();// 存储所有已经通过的稿子的uid
		for (Contribute item : list) {
				uids.add(item.getUid());
		}
		List<Finance> financeList = new ArrayList<>();
		if (uids.size() != 0) {
			financeList = getSo().getList(list.get(0).getUseruid(), status, uids, null);
		}
		return financeList;
	}
	
	/**
	 * 获取最新的文章
	 * @param type 类别，如果类别为空，则返回所有文章中的最新文章
	 * @param pagesieze 返回的文章的每页数量
	 * @return 
	 * @author ShangJianguo
	 */
	public static List<Finance> getLatest(EFinance type, int pagenum, int pagesize) {
		List<Finance> list = new ArrayList<>();
		pagesize = pagesize<=0 ? WebConf.FinancePageSize : pagesize;
		list = getSo().getList(type, new Pager(pagenum, pagesize));
		return list;
	}
	
	public static List<Finance> getTopList() {
		Pager pager = new Pager(1, WebConf.IndexFinanceTopSize);
		List<Finance> list = getSo().getList(true, pager);
		return list;
	}
	
	/**
	 * 头部的文章
	 * @param type
	 * @param pagenum
	 * @param pagesize
	 * @return
	 * @author ShangJianguo
	 */
	public static List<Finance> getLatestList(EFinance type, int pagenum, int pagesize) {
		Rule rule = null;
		if (type == null) {
			rule = new FinanceLatestRule(ViewKeyDict.all);
		}else{
			rule = new FinanceLatestRule(type.name());
		}
		List<Finance> list = getFinanceListFromMC(rule);
		if (list != null) {
			return list;
		}
		list = getLatest(type, pagenum, pagesize);
		if (list.size() > 0) {
			MemcacheUtil.set(rule, list);
		}
		return list;
	}
	
	/**
	 * 获取我的文章排行版
	 * @param type 计数类别，点击数或者赞数
	 * @param financetype 文章类别，若为null，则取所有的文章排行
	 * @return
	 * @author ShangJianguo
	 */
	public static List<Finance> getMyRankList(String authoruid) {
		Rule rule = new FinanceRankRule(ViewKeyDict.my + authoruid, SysConf.Expire_FinanceRank);
		List<Finance> listfinance = getFinanceListFromMC(rule);
		if (listfinance != null) {
			return listfinance;
		}else {
			listfinance = new ArrayList<>();
		}
		List<Map<?, ?>> financeuids = getCountDetailSO().getCountcurr(EChannel.finance, ECountType.click, null, SysConf.FinanceRankClickDay, SysConf.FinanceRankPublishDay, SysConf.FinanceRankListNum, authoruid);
		List<String> refuid = new ArrayList<>();
		for (Map<?, ?> map : financeuids) {
			refuid.add(map.get(ViewKeyDict.refuid).toString());
		}
		for (String item : refuid) {
			Finance finance = getSo().get(item);
			if (finance != null) {
				listfinance.add(finance);
			}
		}
		MemcacheUtil.set(rule, listfinance);
		return listfinance;
	}
	
	/**
	 * 获取文章排行版
	 * @param type 计数类别，点击数或者赞数
	 * @param financetype 文章类别，若为null，则取所有的文章排行
	 * @return
	 * @author ShangJianguo
	 */
	public static List<Finance> getRankList(ECountType type, EFinance financetype) {
		Rule rule = null;
		if (financetype == null) {
			rule = new FinanceRankRule(ViewKeyDict.all, SysConf.Expire_FinanceRank);
		}else {
			rule = new FinanceLatestRule(financetype.name(), SysConf.Expire_FinanceRank);
		}
		List<Finance> listfinance = getFinanceListFromMC(rule);
		if (listfinance != null) {
			return listfinance;
		}else {
			listfinance = new ArrayList<>();
		}
		List<Map<?, ?>> financeuids = getCountDetailSO().getCountcurr(EChannel.finance, type, financetype, SysConf.FinanceRankClickDay, SysConf.FinanceRankPublishDay, SysConf.FinanceRankListNum, null);
		List<String> refuid = new ArrayList<>();
		for (Map<?, ?> map : financeuids) {
			refuid.add(map.get(ViewKeyDict.refuid).toString());
		}
		for (String item : refuid) {
			Finance finance = getSo().get(item);
			if (finance != null) {
				listfinance.add(finance);
			}
		}
		MemcacheUtil.set(rule, listfinance);
		return listfinance;
	}
	
	/**
	 * 从缓存中获取文章
	 * @param rule
	 * @return
	 * @author ShangJianguo
	 */
	@SuppressWarnings("unchecked")
	private static List<Finance> getFinanceListFromMC(Rule rule){
		List<Finance> list = null;
		try {
			list = (List<Finance>)MemcacheUtil.get(rule);
		} catch (Exception e) {
			logException(log, e);
		}
		return list;
	}
	
	/**
	 * 增加点击计数
	 * @param financeuid
	 * @param user 点击人信息
	 * @return
	 * @author ShangJianguo
	 */
	public static void incrClickCount(HttpServletRequest request, HttpServletResponse response, Finance finance, User fromUser){
		boolean isfirst = true;
		Cookie cookie = CookieUtil.getCookie(request, finance.getUid());
		if (cookie != null) {
			isfirst = false;
		}
		if (isfirst) {
			CountDetail countDetail = new CountDetail();
			if (fromUser != null) {
				countDetail.setUseruid(fromUser.getUid());
				UserStatistics statistics = getUserStatisticsSO().obtainOne(fromUser.getUid());
				getUserStatisticsSO().update(statistics.getUid(), (getReadCount(fromUser.getUid()) + 1) > 0 ? (getReadCount(fromUser.getUid()) + 1) : 1, MapperDict.clickcount);
				Rule rule = new UserArticleClickCountRule(fromUser.getUid(), SysConf.Expire_UserArticleClickCount);
				RedisUtil.incr(rule);
			}
			countDetail.setRefuid(finance.getUid());
			countDetail.setType(ECountType.click);
			countDetail.setChannel(EChannel.finance);
			countDetail.setCount(1);
			countDetail.setCountcurr(finance.getClickcount()>=0?finance.getClickcount() : 0);
			Map<String, Object> map = new HashMap<>();
			map.put(ViewKeyDict.createtime, finance.getCreatetime().toString(DateUtil.FORMAT_DATETIME_CHINA));
			countDetail.setData(JsonUtil.toJson(map));
			if (getCountDetailSO().add(countDetail)) {
				incrClickCount(finance);
				CookieUtil.addCookieSess(response, finance.getUid(), EChannel.finance.name());
			}
		}
	}
	
	/**
	 * 增加文章的点击数
	 * @param finance
	 * @return
	 */
	public static boolean incrClickCount(Finance finance) {
		Rule rule = new ClickCountArticleRule(finance.getUid());
		return RedisUtil.incr(rule) >= 0;
	}
	
	/**
	 * 获取某一个作者的文章数量
	 * @param authoruid
	 * @return
	 * @author ShangJianguo
	 */
	public static int getAuthorArticleCount(String authoruid){
		int count = 0;
		Rule rule = new UserArticleCountRule(authoruid);
		try {
			Object cacheCount = MemcacheUtil.get(rule);
			if (cacheCount != null) {
				count = Integer.parseInt(cacheCount.toString());
				return count;
			}
		} catch (Exception e) {
			logException(log, e);
		}
		count = getSo().getAuthorArticleCount(authoruid);
		MemcacheUtil.set(rule, count);
		return count;
	}
	
	/**
	 * 给文章内容分页
	 * @param content
	 * @author liushaomin
	 */
	public static void getPagerContent(Map<String, Object> model, String content, HttpServletRequest request) {
		int contentnum = 1;
		String pagenum = request.getParameter("num");
		Pager pager = Pager.getNewInstance(pagenum, 1);
		if (StrUtil.isNumeric(pagenum)) {
			if (pagenum != null) {
				contentnum = Integer.parseInt(pagenum);
			}
		}
		String[] contents = content.split(WebConf.pageSplitter);
		List<String> contentlist = new ArrayList<String>();
		for (String con : contents) {
			contentlist.add(con);
		}
		if (contentnum < 1) {
			contentnum = 1;
		}else if (contentlist.size() < contentnum) {
			contentnum = contentlist.size();
		}
		pager.setTotalCount(contentlist.size());
		pager.refresh(contentlist);
		pager.setPageNumber(contentnum);
		model.put(ViewKeyDict.pager, pager);
		model.put(ViewKeyDict.content, contentlist.get(contentnum - 1));
		model.put(ViewKeyDict.count + ViewKeyDict.total, pager.getTotalCount());
	}
	
	
	/**
	 * 从序列化文件中取
	 * @param id
	 * @return
	 * @author liushaomin
	 */
	public static Finance getSerialize(int id) {
		String path = SysConf.SerialBasePath + SysConf.SerialFinancePath + SysConf.Separator_Directory + id;
		Finance finance = SerialUtil.deserializeFromJson(path, Finance.class, Json.cacheStrategy);
		if (finance != null) {
			finance.setContributor(getContributorSO().get(finance.getAuthoruid()));
			return finance;
		}
		finance = getSo().get(id);
		if (finance != null) {
			SerialUtil.serializeToJson(finance, path, Json.cacheStrategy);
			return finance;
		}else {
			return null;
		}
	}

	/**
	 * 通过评论查询文章
	 * @param comments
	 * @return
	 * @author YuYingJie
	 */
	public static List<Map<String, Object>> getNewestComments(List<Comments> comments) {
		List<Map<String, Object>> list = new ArrayList<>();
		for (Comments comment : comments) {
			Map<String, Object> finance = new HashMap<>();
			finance.put(ViewKeyDict.bean, so.get(comment.getFromuid()));
			finance.put(ViewKeyDict.comments, comment);
			list.add(finance);
		}
		return list;
	}

	/**
	 * 根据type获取最新的一篇文章
	 * @param type
	 * @return
	 * @author chenminchang
	 */
	public static Finance getNewestFinance(EFinance type) {
		return so.getOneByType(type);
	}
}
