package com.supergenius.web.finance.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.genius.core.base.constant.BaseStrDict;
import com.genius.core.base.utils.CookieUtil;
import com.genius.core.base.utils.StrUtil;
import com.genius.core.base.utils.WebUtil;
import com.genius.model.base.entity.Pager;
import com.genius.model.base.enums.EStatus;
import com.genius.server.base.controller.BaseController;
import com.supergenius.global.conf.SysConf;
import com.supergenius.global.conf.WebConf;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.web.finance.helper.CommentsHP;
import com.supergenius.web.finance.helper.TopicHP;
import com.supergenius.web.finance.helper.UserHP;
import com.supergenius.xo.common.enums.EChannel;
import com.supergenius.xo.common.enums.ECommentType;
import com.supergenius.xo.finance.entity.Topic;
import com.supergenius.xo.finance.enums.ETopicState;
import com.supergenius.xo.finance.service.CountDetailSO;
import com.supergenius.xo.finance.service.TopicGuestSO;
import com.supergenius.xo.finance.service.TopicSO;
import com.supergenius.xo.server.helper.BaseUserHP;
import com.supergenius.xo.user.entity.Comments;
import com.supergenius.xo.user.entity.User;
import com.supergenius.xo.user.service.CommentsSO;
import com.supergenius.xo.user.service.UserSO;

/**
 * 话题controller
 * @author liushaomin
 */
@Controller
public class TopicController extends BaseController{

	@Autowired
	private TopicSO so;
	
	@Autowired
	private TopicGuestSO topicguestSO;
	
	@Autowired
	private CountDetailSO countdetailSO;
	
	@Autowired
	private CommentsSO commentsSO;
	
	@Autowired
	private UserSO userSO;
	
	/**
	 * 打开话题页面
	 * @param model
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = { "/topic" }, method = RequestMethod.GET)
	public String topic(Map<String, Object> model, HttpServletRequest request){
		List<Topic> toplist = TopicHP.getList(WebConf.TopicPageSize);
		if (toplist.size() > WebConf.TopicIndexRotateSize) {
			toplist = toplist.subList(0, WebConf.TopicIndexRotateSize);
		}
		model.put(ViewKeyDict.toplist, toplist);
		model.put(ViewKeyDict.recommendlist, TopicHP.getRecommendTopic());
		model.put(ViewKeyDict.topicrank, TopicHP.getListByTopicRankFromComments(EChannel.topic, ECommentType.comment));
		model.put(ViewKeyDict.list, TopicHP.getList(WebConf.TopicPageSize));
		User user = BaseUserHP.getCurrUser(request);
		if (user != null) {
			model.put(ViewKeyDict.count, TopicHP.getAuthorTopicCount(user.getUid()));
			model.put(ViewKeyDict.count2, TopicHP.getAuthorTopicJoinCount(user.getUid()));	
		}
		return "topic";
	}
	
	/**
	 * 加载更多话题
	 * @param model
	 * @param pagenum
	 * @param request
	 * @return
	 */
	@RequestMapping(value = { "/ajax/topic" }, method = RequestMethod.GET)
	public String topic_more(Map<String, Object> model, Integer pagenum, HttpServletRequest request){
		if (pagenum == null) {
			pagenum = 1;
		}
		Pager pager = Pager.getNewInstance(pagenum, WebConf.TopicPageSize);
		List<Topic> list = TopicHP.getList(pager);
		model.put(ViewKeyDict.list, list);
		model.put(ViewKeyDict.type, "topicindex");
		return "ajaxtopics";
	}
	
	
	/**
	 * 随机话题
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = {"/topic/random"}, method = RequestMethod.GET)
	public String randomtopic(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response){
		int oid = so.getRandomOid();
		return redirectPrefix + "/topic/" + oid;
	}
	
	/**
	 * 进入发起话题（只有会员可以发起）
	 * @param model
	 * @param oid
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = {"/topic/apply"}, method = RequestMethod.GET)
	public String topic_apply(Map<String, Object> model, HttpServletRequest request){
		User user = BaseUserHP.getCurrUser(request);
		//TODO 获取content表中的话题协议
		if (user != null) {
			return "topicapply";
		}
		return redirectPrefix + WebConf.LoginURL + "/login";
	}
	
	/**
	 * 提交话题
	 * @param model
	 * @param request
	 * @param topic
	 * @return
	 */
	@RequestMapping(value = {"/topic/apply"}, method = RequestMethod.POST)
	public String topic_apply(Map<String, Object> model, HttpServletRequest request, Topic topic, String topicimg){
		User user = BaseUserHP.getCurrUser(request);
		if (user != null) {
			boolean flag = true;
			if (StringUtils.isEmpty(topic.getTitle()) || StringUtils.isEmpty(topic.getContent())){
				 flag = false;
			}
			if (flag) {
				if (StrUtil.isNotEmpty(topicimg)) {
					String[] imgs = topicimg.split(BaseStrDict.comma);
					topic.setimgs(imgs);
				}
				topic.setTitle(WebUtil.clearXSS(topic.getTitle()));
				topic.setContent(WebUtil.clearXSS(topic.getContent()));
				topic.setUseruid(user.getUid());
				topic.setAuthor(user.getShowname());
				topic.setState(ETopicState.init);
				if (so.add(topic)) {
					return redirectPrefix + "/topic/applyresult";
				}
			}
			model.put(ViewKeyDict.title, topic.getTitle());
			model.put(ViewKeyDict.content, topic.getContent());
			return topic_apply(model, request);
		}else {
			return redirectPrefix + WebConf.LoginURL;
		}
	}
	
	/**
	 * 提交话题结果页
	 * @param model
	 * @param request
	 * @param topic
	 * @return
	 */
	@RequestMapping(value = {"/topic/applyresult"}, method = RequestMethod.GET)
	public String topicapply_result(Map<String, Object> model, HttpServletRequest request){
		return "applyresult";
	}
	
	/**
	 * 进入我的话题
	 * @param model
	 * @param request
	 * @param topic
	 * @return
	 */
	@RequestMapping(value = {"/mytopic"}, method = RequestMethod.GET)
	public String mytopic(Map<String, Object> model, HttpServletRequest request){
		User user = BaseUserHP.getCurrUser(request);
		if (user != null ) {
			Pager pager = Pager.getNewInstance(1, WebConf.MyTopicPageSize);
			List<Topic> topics = so.getList(user.getUid(), pager);
			model.put(ViewKeyDict.topicrank, TopicHP.getListByTopicRankFromComments(EChannel.topic, ECommentType.comment));
			model.put(ViewKeyDict.list, topics);
			model.put(ViewKeyDict.count, TopicHP.getAuthorTopicCount(user.getUid()));
			model.put(ViewKeyDict.count2, TopicHP.getAuthorTopicJoinCount(user.getUid()));
			return "mytopics";
		}else {
			return redirectPrefix + WebConf.LoginURL;
		}
	}
	
	/**
	 * ajax获取会员参与的话题
	 * @param model
	 * @param oid
	 * @param pagenum
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/ajax/mytopic/join/{oid:\\d+}", method = RequestMethod.GET)
	public String ajaxtopic_join(Map<String, Object> model, @PathVariable Integer oid, Integer pagenum, HttpServletRequest request, HttpServletResponse response) {
		User user = userSO.get(oid);
		if (user == null || oid == 0) {
			return response404(response);
		}
		if (pagenum == null) {
			pagenum = 1;
		}
		Pager pager = Pager.getNewInstance(pagenum, WebConf.MyTopicPageSize);
		List<String> topicuids = commentsSO.getFromuidList(user.getUid(), EChannel.topic, ECommentType.comment, pager);
		List<Topic> topics = new ArrayList<>();
		for (String item : topicuids) {
			 Topic topic =so.get(item);
			if (topic != null) {
				topics.add(topic);
			}
		}
		model.put(ViewKeyDict.list, topics);
		model.put(ViewKeyDict.type, "join");
		return "ajaxtopics";  
	}
	
	/**
	 * ajax 获取全部的话题（加载更多）
	 * @param model
	 * @param oid
	 * @param pagenum
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/ajax/mytopic/all/{oid:\\d+}", method = RequestMethod.GET)
	public String ajaxtopic_all(Map<String, Object> model, @PathVariable Integer oid, Integer pagenum, HttpServletRequest request, HttpServletResponse response) {
		User user = userSO.get(oid);
		if (user == null || oid == 0) {
			return response404(response);
		}
		if (pagenum == null) {
			pagenum = 1;
		}
		Pager pager = Pager.getNewInstance(pagenum, WebConf.MyTopicPageSize);
		List<Topic> topics = so.getList(user.getUid(), pager);
		model.put(ViewKeyDict.list, topics);
		model.put(ViewKeyDict.type, "all");
		return "ajaxtopics";  
	}
	
	/**
	 * ajax 获取不同state的话题
	 * @param model
	 * @param state
	 * @param pagenum
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/ajax/mytopic/state/{state:\\d+}", method = RequestMethod.GET)
	public String ajaxtopic_state(Map<String, Object> model, @PathVariable int state, Integer pagenum, HttpServletRequest request) {
		User user = BaseUserHP.getCurrUser(request);
		if (user == null) {
			return redirectPrefix + WebConf.LoginURL;
		}
		Pager pager = Pager.getNewInstance(pagenum, WebConf.MyTopicPageSize);
		List<Topic> topics = so.getList(user.getUid(), ETopicState.get(state), pager);
		model.put(ViewKeyDict.list, topics);
		model.put(ViewKeyDict.type, ETopicState.get(state).name());
		return "ajaxtopics";  
	}
	
	/**
	 * ajax 获取不同status的话题(已撤销)
	 * @param model
	 * @param status
	 * @param pagenum
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/ajax/mytopic/status/{status:\\d+}", method = RequestMethod.GET)
	public String ajaxtopic_status(Map<String, Object> model, @PathVariable int status, Integer pagenum, HttpServletRequest request) {
		User user = BaseUserHP.getCurrUser(request);
		if (user == null) {
			return redirectPrefix + WebConf.LoginURL;
		}
		Pager pager = Pager.getNewInstance(pagenum, WebConf.MyTopicPageSize);
		List<Topic> topics = so.getList(user.getUid(), EStatus.get(status), pager);
		model.put(ViewKeyDict.list, topics);
		model.put(ViewKeyDict.type, EStatus.get(status).name());
		return "ajaxtopics";
	}
	
	/**
	 * 话题详情
	 * @param model
	 * @param request
	 * @param oid
	 * @param response
	 * @return
	 */
	@RequestMapping(value = { "/topic/{oid:\\d+}" }, method = RequestMethod.GET)
	public String topicoid(Map<String, Object> model, HttpServletRequest request, @PathVariable Integer oid, HttpServletResponse response){
		Topic topic = so.get(oid);
		if (topic == null || topic.getState() != ETopicState.succeed) {
			return response404(response);
		}
		User user = BaseUserHP.getCurrUser(request);
		if (user != null) {
			List<String> prizes = UserHP.getListPrize(user);
			for (String item : prizes) {
				if (topic.getUid().equals(item)) {
					topic.setIsprize(true);
					break;
				}
			}
		}else {
			Cookie cookie = CookieUtil.getCookie(request, EChannel.topic.name() + topic.getUid() + ViewKeyDict.prizefinance);
			if (cookie != null) {
				topic.setIsprize(true);
			}
		}
		TopicHP.incrClickCount(request, response, topic, user);	
		model.put(ViewKeyDict.bean, topic);
		model.put(ViewKeyDict.author, userSO.get(topic.getUseruid()));
		model.put(ViewKeyDict.topicrank, TopicHP.getListByTopicRankFromComments(EChannel.topic, ECommentType.comment));
		model.put(ViewKeyDict.list, topicguestSO.getList(topic.getUid()));
		model.put(ViewKeyDict.list2, TopicHP.getCommentUser(topic.getUid()));
		model.put(ViewKeyDict.wonderfullist, CommentsHP.getCommentsFromPraise(topic.getUid(), EChannel.topic, ECommentType.comment, SysConf.TopicCommentRankNum));
		return "topicoid";
	}
	
	/**
	 * TA的话题列表
	 * @param model
	 * @param request
	 * @param useruid
	 * @param pagenum
	 * @return
	 */
	@RequestMapping(value = {"/topic/{useruid:.{32}}/{pagenum:\\d+}"}, method = RequestMethod.GET)
	public String histopic(Map<String, Object> model, HttpServletRequest request, @PathVariable String useruid, @PathVariable Integer pagenum, HttpServletResponse response){
		User user = userSO.get(useruid);
		if (user == null) {
			return response404(response);
		}
		if (pagenum == null) {
			pagenum = 1;
		}
		model.put(ViewKeyDict.user, user);
		model.put(ViewKeyDict.list, so.getList(user.getUid(), new Pager(pagenum, WebConf.MyTopicPageSize)));
		model.put(ViewKeyDict.topicrank, TopicHP.getListByTopicRankFromComments(EChannel.topic, ECommentType.comment));
		model.put(ViewKeyDict.count, TopicHP.getAuthorTopicCount(user.getUid()));
		model.put(ViewKeyDict.count2, TopicHP.getAuthorTopicJoinCount(user.getUid()));
		return "histopics";
	}
	
	/**
	 * ajax获取与我相关的话题评论
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/ajax/mytopic/comments/join/{oid:\\d+}", method = RequestMethod.GET)
	public String ajaxtopiccomments_join(Map<String, Object> model, @PathVariable Integer oid, Integer pagenum, HttpServletRequest request) {
		User user = BaseUserHP.getCurrUser(request);
		if (user == null) {
			return redirectPrefix + WebConf.LoginURL;
		}
		if (pagenum == null) {
			pagenum = 1;
		}
		Topic topic = so.get(oid);
		Pager pager = Pager.getNewInstance(pagenum, WebConf.TopicCommentPageSize);
		List<Comments> comments = CommentsHP.getTopicComments(pager, user.getUid(), topic.getUid());
		model.put(ViewKeyDict.list, comments);
		model.put(ViewKeyDict.type, "topic");
		return "ajaxcomments";
	}
}
