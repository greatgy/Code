package com.supergenius.web.finance.api;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.genius.core.base.annotation.Json;
import com.genius.core.base.utils.JsonUtil;
import com.genius.core.base.utils.StrUtil;
import com.genius.model.base.enums.EStatus;
import com.genius.server.base.controller.BaseController;
import com.supergenius.global.conf.WebConf;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.server.common.utils.ValidUtil;
import com.supergenius.server.user.helper.BaseUserHP;
import com.supergenius.web.finance.helper.CommentsHP;
import com.supergenius.xo.user.entity.User;
import com.supergenius.xo.user.service.UserSO;

/*
 * 用户接口
 * liubin
 */
@Controller
public class UserInterfacer extends BaseController {

	private static Logger log = LoggerFactory.getLogger(UserInterfacer.class);
	@Autowired
	private UserSO userSO;

	/**
	 * 个人中心用户信息
	 * 
	 * @param model
	 * @param uid
	 * @return
	 * @author liubin
	 * @createtime 2017年1月5日下午5:12:38
	 * @return String
	 */
	@RequestMapping(value = "/api/user/{uid:.{32}}", method = RequestMethod.GET)
	@ResponseBody
	public String getInfo(Map<String, Object> model, @PathVariable String uid) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		if (StrUtil.isNotEmpty(uid)) {
			User user = BaseUserHP.get(uid);
			if (user != null) {
				resultMap.put(ViewKeyDict.info, JsonUtil.toJson(user, Json.appStrategy));// ViewKeyDict.info配置出来
				log.info("the app need return userinfo JsonData" + JsonUtil.toJson(resultMap));
				return JsonUtil.toJson(resultMap);
			}
			log.info("user info is null");
		}
		return null;
	}

	/**
	 * 个人中心用户评论
	 * 
	 * @param model
	 * @param uid
	 * @return
	 * @author liubin
	 * @createtime 2017年1月5日下午5:12:38
	 * @return String
	 */
	@RequestMapping(value = "/api/user/{uid:.{32}}/comments", method = RequestMethod.GET)
	@ResponseBody
	public String getComments(HttpServletRequest request, Map<String, Object> model, @PathVariable String uid) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Map<String, Object> receivedMap = new HashMap<String, Object>();
		Map<String, Object> mineMap = new HashMap<String, Object>();
		int pageNum = Integer.valueOf((request.getParameter("num") == null || request.getParameter("num").length() == 0) ? "1" : request.getParameter("num"));
		List<Map<String, Object>> list = new ArrayList<>();
		if (StrUtil.isNotEmpty(uid)) {
			User user = BaseUserHP.get(uid);
			if (user != null) {
				receivedMap.put(ViewKeyDict.received, JsonUtil.toJson(CommentsHP.getToMeComment(user.getUid(), pageNum, WebConf.MsgPageSize), Json.webStrategy));
				mineMap.put(ViewKeyDict.mine, JsonUtil.toJson(CommentsHP.getMyPublishComment(user.getUid(), pageNum, WebConf.MsgPageSize), Json.webStrategy));
				list.add(mineMap);
				list.add(receivedMap);
				resultMap.put(ViewKeyDict.comments, JsonUtil.toJson(list));
				log.info("the app need return usercomments JsonData:" + JsonUtil.toJson(resultMap));
				return JsonUtil.toJson(resultMap);
			}
			log.info("user comments is null!");
		}
		return null;
	}
	
	/**
	 * 用户登录接口
	 * @param model
	 * @param name
	 * @param pad
	 * @param request
	 * @param response
	 * @return
	 * @author 许志翔     2017-5-3  15:34
	 * 
	 */
	@RequestMapping(value = "/api/user/login", method = RequestMethod.POST)
	@ResponseBody
	public String login(Map<String, Object> model, String name, String password, HttpServletRequest request, HttpServletResponse response){	
		User user = null;
		boolean flag = false; //判断是否成功登录的状态位
		EStatus status = null; //用户状态
		if (ValidUtil.isEmail(name)) { //通过用户名获取user
			user = userSO.getByEmail(name);
		} else if (StrUtil.isNotEmpty(name)) {
			user = userSO.getByUsersn(name);
		}
		if (user != null && user.checkPwd(password)) {
			if (user.getIsInit() || user.getIsStart() || user.getIsEnd()) { // 未激活邮箱的会员,未完善，未身份验证   0
				status = EStatus.disable;    
			} else if (user.getIsDeleted()) { //删除状态的用户 2
				status = EStatus.deleted;
			} else if (user.getIsDisable()) { //冻结状态的用户 12
				status = EStatus.wait;				
			}else if (user.getIsEnable()) { //正常登陆 1 
				status = EStatus.enable;
				flag = true;							
			}					
		}else { 
			status = EStatus.end; //账号密码错误 13 
		}
		if (flag){ //判断是否是正常登陆
			model.put(ViewKeyDict.user, user); //成功返回用户，失败返回空				
		} else {
			model.put(ViewKeyDict.user, null);
		}
		model.put(ViewKeyDict.status, status);	
		return JsonUtil.toJson(model, Json.appStrategy);	
	}
	
	
}
