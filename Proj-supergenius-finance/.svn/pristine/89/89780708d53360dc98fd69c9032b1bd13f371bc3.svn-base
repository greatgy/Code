package com.supergenius.web.finance.api;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.genius.core.base.annotation.Json;
import com.genius.core.base.utils.JsonUtil;
import com.genius.core.base.utils.StrUtil;
import com.genius.core.base.utils.WebUtil;
import com.genius.model.base.entity.Pager;
import com.genius.server.base.controller.BaseController;
import com.supergenius.global.conf.SysConf;
import com.supergenius.global.conf.WebConf;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.server.user.helper.BaseUserHP;
import com.supergenius.web.finance.helper.CommentsHP;
import com.supergenius.web.finance.helper.FinanceHP;
import com.supergenius.web.finance.helper.InboxHP;
import com.supergenius.web.finance.helper.MsgHP;
import com.supergenius.web.finance.helper.UserHP;
import com.supergenius.xo.common.constants.MapperDict;
import com.supergenius.xo.common.enums.EChannel;
import com.supergenius.xo.finance.entity.Finance;
import com.supergenius.xo.finance.entity.UserStatistics;
import com.supergenius.xo.finance.service.UserStatisticsSO;
import com.supergenius.xo.user.entity.Comments;
import com.supergenius.xo.user.entity.User;
import com.supergenius.xo.user.enums.EComment;
import com.supergenius.xo.user.service.CommentsSO;

/**
 * app评论相关
 * 
 * @author chenminchang
 * @date 2017年1月5日 下午4:50:44
 */
@Controller
public class CommentInterfacer extends BaseController {

	@Autowired
	CommentsSO commentsSO;
	@Autowired
	UserStatisticsSO statisticsSO;

	/**
	 * 加载文章详情页的评论
	 * 
	 * @param request
	 * @param channel
	 * @param oid
	 * @param num
	 * @param uid 用户的uid
	 * @return
	 * @author chenminchang
	 * @create 2017年1月9日上午10:52:21
	 */
	@RequestMapping(value = { "/api/comment/article/{channel:\\d+}/{oid:\\d+}//{uid:.{32}}" }, method = RequestMethod.GET)
	@ResponseBody
	public String comment_article(HttpServletRequest request, @PathVariable int channel, @PathVariable int oid, @PathVariable String uid, Integer num) {
		Map<String, Object> resultMap = new HashMap<>();
		Finance finance = FinanceHP.getSerialize(oid);
		if (finance != null) {
			EChannel eChannel = EChannel.get(channel);
			List<Comments> list = new ArrayList<>();
			if (num == null || num <= 0) {
				num = 1;
			}
			User user = BaseUserHP.get(uid);
			list = CommentsHP.getCommentList(eChannel, finance.getUid(), WebConf.MyCommentPageSize, num, null);
			Collections.reverse(list);
			List<String> prizes = new ArrayList<>();
			if (user != null) {
				prizes = UserHP.getListPrize(user);
				for (Comments comments : list) {
					for (String item : prizes) {
						if (comments.getUid().equals(item)) {
							comments.setIsprize(true);
							break;
						}
					}
				for (Comments comment : comments.getReplys()) {
						for (String item : prizes) {
							if (comment.getUid().equals(item)) {
								comment.setIsprize(true);
								break;
							}
						}
					}
				}
			} 	
			for (Comments comments : list) {
				Collections.reverse(comments.getReplys());
			}
			int conmmentsCount = commentsSO.getCommentsCount(null, EComment.comment, eChannel, finance.getUid());
			int prizesCount = commentsSO.getCommentsCount(null, EComment.praise, eChannel, finance.getUid());
			resultMap.put(ViewKeyDict.countCollect, conmmentsCount);
			resultMap.put(ViewKeyDict.countPrize, prizesCount);
			resultMap.put(ViewKeyDict.list, list);
			return JsonUtil.toJson(resultMap, Json.webStrategy);
		}
		return null;
	}

	/**
	 * 添加评论
	 * 
	 * @param request
	 * @param useruid
	 * @param articleuid
	 * @param content
	 * @return
	 * @author YangGuang
	 * @create 2017年5月10日下午19:52:21
	 */
	@RequestMapping(value = { "/api/comment/article/addComment" }, method = RequestMethod.POST)
	@ResponseBody
	public String addComment(HttpServletRequest request, String fromuseruid, String fromuid, String content, String topuid, String touid, String touseruid) {
		Comments comments = new Comments();
		comments.setFromuid(fromuid);
		User user = null;
		if (StrUtil.isNotEmpty(fromuseruid)) {
			user = BaseUserHP.get(fromuseruid);
		}
		if (user != null) {
			comments.setFromuseruid(user.getUid());
			comments.setFromuseroid(user.getOid());
			comments.setFromusername(user.getShowname());
			UserStatistics statistics = statisticsSO.obtainOne(user.getUid());
			int number = statistics.getMycommentcount();
			if (number <= 0) {
				number = CommentsHP.getMyCommentsCount(user.getUid());
			}
			statisticsSO.update(statistics.getUid(), (number + 1) >= 0 ? (number + 1) : 0, MapperDict.mycommentcount);
		} else {
			comments.setFromuseruid(SysConf.DefaultAnonymousUid);
			comments.setFromuseroid(SysConf.DefaultAnonymousOid);
			comments.setFromusername(WebConf.DefaultAnonymousName);
		}
		if (StringUtils.isNotEmpty(touseruid)) {
			User toUser = BaseUserHP.get(touseruid);
			if (toUser != null) {
				comments.setTousername(toUser.getShowname());
				comments.setTouseroid(toUser.getOid());
			} else {
				comments.setTousername(WebConf.DefaultAnonymousName);
				comments.setTouseruid(SysConf.DefaultAnonymousUid);
				comments.setTouseroid(SysConf.DefaultAnonymousOid);
			}
		}
		if (StringUtils.isNotEmpty(touid)) {
			comments.setTouid(touid);
		}
		if (StringUtils.isNotEmpty(topuid)) {
			Map<String, Object> map = new HashMap<>();
			map.put(ViewKeyDict.topuid, topuid);
			comments.setData(JsonUtil.toJson(map));
		}
		comments.setType(EComment.comment);
		comments.setChannel(EChannel.finance);
		comments.setContent(WebUtil.clearXSS(content));
		boolean addresult = CommentsHP.add(comments, request);
		if (addresult == true) {
			if (CommentsHP.IsSend(comments) && user != null) {
				InboxHP.sendInbox(CommentsHP.sendMsg(comments), comments);
			}
			return "success";
		}

		return "failure";
	}

	/**
	 * 删除评论
	 * 
	 * @param model
	 * @param uid
	 * @param request
	 * @return
	 * @author 许志翔
	 * @create 2017年5月15日 15:11
	 */
	@RequestMapping(value = { "/api/comment/delete/{uid:.{32}}" }, method = RequestMethod.GET)
	@ResponseBody
	public String deleteMyComment(HttpServletRequest request, @PathVariable String uid) {
		Comments comment = commentsSO.get(uid);
		if (comment != null) {
			CommentsHP.removeMemcache(comment);
			CommentsHP.deleteSerialFile(comment.getChannel().name(), comment.getFromuid());
			commentsSO.delete(uid);
			return "success";
		}
		return "failure";
	}
	
	/**
	 * 加载评论的所有子评论
	 * @param request
	 * @param uid
	 * @param num
	 * @author 许志翔
	 * @create 2017年5月23日 14:11
	 */
	@RequestMapping(value = { "/api/comment/reply/{uid:.{32}}/{articleuid:.{32}}" }, method = RequestMethod.GET)
	@ResponseBody
	public String getSecondComments(HttpServletRequest request, @PathVariable String uid, Integer num, @PathVariable String articleuid) {
		List<Comments> list = new ArrayList<>();
		Map<String, Object> resultMap = new HashMap<String, Object>();
		if (num == null || num <= 0) {
			num = 1;
		}
		Comments comment = commentsSO.get(uid);
		List<Comments> first = CommentsHP.getCommentList(EChannel.finance, articleuid, WebConf.MyCommentPageSize, num, uid);
		if (first.size()>0) {
			List<Comments> replys = first.get(0).getReplys();
			Collections.reverse(replys);
			resultMap.put(MapperDict.data, replys);
		}
		list = commentsSO.getList(uid, Pager.getNewInstance(num, WebConf.MyPublishCommentCount));
		resultMap.put(MapperDict.reply, list);
		resultMap.put(MapperDict.comment, comment);
		return JsonUtil.toJson(resultMap, Json.webStrategy);
	}
	
	/**
	 * 文章详情页评论点赞
	 * @param model
	 * @param channel
	 * @param oid
	 * @param uid
	 * @param request
	 * @param response
	 * @return
	 * @author 许志翔
	 * @create 2017年7月3日 15:28
	 */
	@RequestMapping(value = { "/api/comment/prize/{uid:.{32}}/{oid:\\d+}" }, method = RequestMethod.GET)
	@ResponseBody
	boolean comments_prize(Map<String, Object> model, @PathVariable int oid, @PathVariable String uid, HttpServletRequest request, HttpServletResponse response) {
		String channel = "comments";
		User user = BaseUserHP.getCurrUser(request);
		UserStatistics statistics = null;
		boolean bool = false;
		boolean isprize = false;
		String useruid = "";
		if (EChannel.comments.name().equals(channel)) {
			Comments comments = commentsSO.get(uid);
			useruid = comments.getFromuseruid();
			if (useruid != null && !SysConf.DefaultAnonymousUid.equals(useruid)) {
				statistics = statisticsSO.obtainOne(useruid);
			}
		}
		if (user != null) {
			if (!commentsSO.isNotPrized(uid, user.getUid(), EChannel.get(channel))) {// 取消赞
				CommentsHP.cancelPrize(oid, uid, channel);
				isprize = false;
				bool = false;
			} else {// 加赞
				Comments comment = new Comments();
				comment.setFromuid(uid);
				comment.setFromuseruid(user.getUid());
				comment.setFromuseroid(user.getOid());
				comment.setFromusername(user.getShowname());
				comment.setContent("");
				comment.setType(EComment.praise);
				comment.setChannel(EChannel.get(channel));
				isprize = true;
				bool = CommentsHP.add(comment, request);
				if (bool) {
					InboxHP.sendInbox(MsgHP.prizeMsg(channel, uid, user), comment);
				}
			}
		}
		if (statistics != null) { // 更新userstatistics
			int number = statistics.getTomeprizecount();
			if (number <= 0) {
				number = CommentsHP.getMyReceivedPrizeCount(useruid);
			} else {
				if (isprize) {
					number = (number + 1) >= 0 ? (number + 1) : 0;
				} else {
					number = (number - 1) >= 0 ? (number - 1) : 0;
				}
			}
			statisticsSO.update(statistics.getUid(), number, MapperDict.tomeprizecount);
		}
		return bool;
	}
}
