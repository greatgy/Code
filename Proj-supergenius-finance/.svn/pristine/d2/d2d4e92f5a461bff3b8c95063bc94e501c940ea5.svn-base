package com.supergenius.web.finance.api;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.genius.core.base.annotation.Json;
import com.genius.core.base.utils.JsonUtil;
import com.genius.core.base.utils.StrUtil;
import com.genius.model.base.entity.Pager;
import com.genius.model.base.enums.EStatus;
import com.genius.server.base.controller.BaseController;
import com.supergenius.global.conf.WebConf;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.server.user.helper.BaseUserHP;
import com.supergenius.web.finance.helper.FinanceHP;
import com.supergenius.xo.finance.entity.Contribute;
import com.supergenius.xo.finance.enums.EContributeState;
import com.supergenius.xo.finance.service.ContributeSO;
import com.supergenius.xo.user.entity.User;

/**
 * 我的文章Controller
 * 
 * @author YangGuang
 * @date
 */

public class MyArticleInterface extends BaseController {

	@Autowired
	private ContributeSO so;

	private static Logger log = LoggerFactory.getLogger(MyArticleInterface.class);

	/**
	 * 我的文章
	 * 
	 * @param model
	 * @param request
	 * @return
	 * @author YangGuang
	 */
	@RequestMapping(value = { "/api/user/{uid:.{32}}/articles" }, method = RequestMethod.GET)
	@ResponseBody
	private String my_article(HttpServletRequest request, @PathVariable String uid) {
		Map<String, Object> myArticle = new HashMap<String, Object>();
		Map<String, Object> articles = new HashMap<String, Object>();
		if (StrUtil.isNotEmpty(uid)) {
			User user = BaseUserHP.get(uid);
			if (user != null) {
				List<Contribute> rejectedContribute = so.getList(user.getUid(), EContributeState.refuse, Pager.getNewInstance(
						Integer.parseInt((request.getParameter("num") == null || request.getParameter("num").length() == 0) ? "1" : request.getParameter("num")), WebConf.MyArticlePageSize));
				List<Contribute> approvingContribute = so.getList(user.getUid(), EContributeState.init, Pager.getNewInstance(
						Integer.parseInt((request.getParameter("num") == null || request.getParameter("num").length() == 0) ? "1" : request.getParameter("num")), WebConf.MyArticlePageSize));
				List<Contribute> publishedContribute = so.getList(user.getUid(), EContributeState.accept, Pager.getNewInstance(
						Integer.parseInt((request.getParameter("num") == null || request.getParameter("num").length() == 0) ? "1" : request.getParameter("num")), WebConf.MyArticlePageSize));
				articles.put(ViewKeyDict.published, FinanceHP.getEContributeStateFinances(publishedContribute, EStatus.enable));
				articles.put(ViewKeyDict.approving, FinanceHP.getEContributeStateFinances(approvingContribute, EStatus.enable));
				articles.put(ViewKeyDict.rejected, FinanceHP.getEContributeStateFinances(rejectedContribute, EStatus.enable));
				myArticle.put(ViewKeyDict.articles, articles);
				log.info("the app need return myArticle JsonData" + JsonUtil.toJson(myArticle));
				return JsonUtil.toJson(myArticle, Json.appStrategy);
			}
			log.info("user info is null");
		}
		return null;
	}
}
