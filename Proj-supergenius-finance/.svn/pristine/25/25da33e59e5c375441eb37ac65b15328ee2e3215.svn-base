package com.supergenius.web.finance.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.genius.core.base.annotation.Json;
import com.genius.core.base.utils.JsonUtil;
import com.genius.server.base.controller.BaseController;
import com.supergenius.global.conf.SysConf;
import com.supergenius.global.conf.WebConf;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.server.user.helper.BaseUserHP;
import com.supergenius.web.finance.helper.DebateHP;
import com.supergenius.web.finance.helper.SearchHP;
import com.supergenius.xo.common.enums.ESite;
import com.supergenius.xo.finance.entity.Debate;
import com.supergenius.xo.finance.entity.Finance;
import com.supergenius.xo.finance.entity.Topic;
import com.supergenius.xo.finance.service.DebateSO;
import com.supergenius.xo.user.entity.User;
import com.supergenius.xo.user.service.UserSO;

/**
 * 搜索控制器，负责查询的相关请求
 * @author ShangJianguo
 */
@Controller
public class SearchController extends BaseController{

	@Autowired
	private UserSO userSO;
	
	@Autowired DebateSO debateSO;
	/**
	 * 跳转到搜索页面
	 * @param model
	 * @param request
	 * @return
	 * @author ShangJianguo
	 */
	@RequestMapping(value = "search", method = RequestMethod.GET)
	public String search(Map<String, Object> model, String keyword, HttpServletRequest request, RedirectAttributes attributes){
		attributes.addAttribute(ViewKeyDict.content, keyword);
		attributes.addAttribute(ViewKeyDict.channel, ESite.finance);
		return redirectPrefix + WebConf.SolrSearchUrl + "/search";
	}
	
	/**
	 * 查询
	 * @param model
	 * @param channel
	 * @return
	 * @author YuYingJie
	 */
	@RequestMapping(value = {"/search/{channel:\\w+}" }, method = RequestMethod.GET)
	public String channel_search(Map<String, Object> model, @PathVariable String channel, String keyword, HttpServletRequest request) {
		/*if (channel == null) {
			return search(model, keyword, request);
		}*/
		if (channel.equals(ViewKeyDict.user)) {
			Map<String, Object> map = SearchHP.search(keyword, channel, WebConf.SearchPageSize, request);
			if (map.containsKey(ViewKeyDict.list)) {
				model.put(ViewKeyDict.list, map.get(ViewKeyDict.list));
			}
			if (map.containsKey(ViewKeyDict.count)) {
				model.put(ViewKeyDict.count, map.get(ViewKeyDict.count));
			}
		}
		model.put(ViewKeyDict.searchkeyword, keyword);
		model.put(ViewKeyDict.channel, channel);
		model.put(ViewKeyDict.SearchUrl, WebConf.SearchUrl);
		return "search";
	}
	
	/**
	 * ajax加载更多
	 * @param model
	 * @param channel
	 * @param keyword
	 * @param pagenum
	 * @return
	 * @author YuYingJie
	 */
	@RequestMapping(value = {"/ajax/search/{channel:\\w+}" }, method = RequestMethod.GET)
	public String ajax_search(Map<String, Object> model, @PathVariable String channel, String keyword, int pagenum, HttpServletRequest request) {
		if (channel == null) {
			return null;
		}
		List<?> list = SearchHP.search(keyword, channel, pagenum, WebConf.SearchPageSize, request);
		model.put(ViewKeyDict.list, list);
		model.put(ViewKeyDict.searchkeyword, keyword);
		model.put(ViewKeyDict.channel, channel);
		return "ajaxsearch";
	}
	
	/**
	 * ajax查询文章的 查看、点赞、评论 的数量
	 * @param model
	 * @param finance
	 * @return
	 * @author YuYingJie
	 */
	@RequestMapping(value = {"/ajax/search/finance/count"}, method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> ajax_finance(Map<String, Object> model, String[] uids) {
		Map<String, Object> map = new HashMap<>();
		Finance finance = new Finance();
		if (uids == null) {
			return null;
		}
		for (String id : uids) {
			finance.setUid(id);
			Map<String, Object> map2 = new HashMap<>();
			map2.put(ViewKeyDict.clickcount, finance.getClickcount());
			map2.put(ViewKeyDict.prizecount, finance.getPrizecount());
			map2.put(ViewKeyDict.commentcount, finance.getCommentcount());
			map.put(id, map2);
		}
		return json(map, Json.webStrategy);
	}

	/**
	 * ajax查询文章的 查看、点赞、评论 的数量
	 * @param model
	 * @param finance
	 * @return
	 * @author YuYingJie
	 */
	@RequestMapping(value = {"/ajax/search/topic/count"}, method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> ajax_topic(Map<String, Object> model, String uids) {
		if (uids == null) {
			return null;
		}
		Map<String, Object> map = new HashMap<>();
		Topic topic = new Topic();
		@SuppressWarnings("unchecked")
		Map<String, String> map2 = JsonUtil.fromJson(uids, Map.class);
		for (String id : map2.keySet()) {
			String useruid = map2.get(id);
			topic.setUid(id);
			User user = userSO.get(useruid);
			Map<String, Object> map3 = new HashMap<>();
			map3.put(ViewKeyDict.clickcount, topic.getClickcount());
			map3.put(ViewKeyDict.prizecount, topic.getPrizecount());
			map3.put(ViewKeyDict.commentcount, topic.getCommentcount());
			if (user == null) {
				map3.put(ViewKeyDict.oid, SysConf.DefaultAnonymousOid);
				map3.put(ViewKeyDict.avatar, "");
			} else {
				map3.put(ViewKeyDict.oid, user.getOid());
				map3.put(ViewKeyDict.avatar, user.getAvatar());
			}
			
			map.put(id, map3);
		}
		return json(map, Json.webStrategy);
	}

	/**
	 * ajax查询是否投过票
	 * @param model
	 * @param finance
	 * @return
	 * @author YuYingJie
	 */
	@RequestMapping(value = {"/ajax/search/debate/count"}, method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Map<String, Object>> ajax_debate(Map<String, Object> model, String[] uids, HttpServletRequest request) {
		Map<String, Object> map = new HashMap<>();
		if (uids == null) {
			return null;
		}
		User user = BaseUserHP.getCurrUser(request);
		Debate debate;
		Map<String, Object> map2;
		for (String id : uids) {
			map2 = DebateHP.isVoted(user, id, request);
			debate = debateSO.get(id);
			map2.put(ViewKeyDict.rednum, debate.getCountred());
			map2.put(ViewKeyDict.bluenum, debate.getCountblue());
			map.put(id, map2);
		}
		return json(map, Json.webStrategy);
	}
	
	/**
	 * 用户查询(ajax的第一次查询)
	 * @param model
	 * @param keyword
	 * @param pagenum
	 * @param request
	 * @return
	 * @author YuYingJie
	 */
	@RequestMapping(value = {"/ajax/search/first/user"}, method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> ajax_user(Map<String, Object> model, String keyword, HttpServletRequest request) {
		Map<String, Object> map = new HashMap<>();
		Map<String, Object> map1 = SearchHP.search(keyword, ViewKeyDict.user, WebConf.SearchPageSize, request);
		if (map1.containsKey(ViewKeyDict.list)) {
			map.put(ViewKeyDict.list, map1.get(ViewKeyDict.list));
		}
		if (map1.containsKey(ViewKeyDict.count)) {
			map.put(ViewKeyDict.count, map1.get(ViewKeyDict.count));
		}
		map.put(ViewKeyDict.searchkeyword, keyword);
		map.put(ViewKeyDict.channel, ViewKeyDict.user);
		return map;
	}

}
