package com.supergenius.web.finance.controller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.genius.server.base.controller.BaseController;
import com.supergenius.server.user.helper.BaseUserHP;
import com.supergenius.web.finance.helper.InboxHP;
import com.supergenius.web.finance.helper.SubscribeHP;
import com.supergenius.xo.common.constants.MapperDict;
import com.supergenius.xo.finance.entity.Subscribe;
import com.supergenius.xo.finance.entity.UserStatistics;
import com.supergenius.xo.finance.enums.EFollow;
import com.supergenius.xo.finance.service.SubscribeSO;
import com.supergenius.xo.finance.service.UserStatisticsSO;
import com.supergenius.xo.user.entity.User;

/**
 * 订阅控制器
 * @author YuYingJie
 */
@Controller
public class SubscribeController extends BaseController {

	@Autowired
	SubscribeSO so;

	@Autowired
	UserStatisticsSO statisticsSO;

	/**
	 * 订阅,取消订阅
	 * 
	 * @param model
	 * @param oid
	 * @param request
	 * @return
	 * @author YuYingJie
	 */
	@RequestMapping(value = "/my/subscribe/{oid:\\d+}")
	public @ResponseBody
	boolean addSubscribe(Map<String, Object> model, @PathVariable int oid, HttpServletRequest request) {
		boolean isSubscribe = false;
		boolean bool = false;
		User user = BaseUserHP.getCurrUser(request);
		User refUser = BaseUserHP.get(oid);
		if (refUser == null || user == null || oid == user.getOid()) {
			return false;
		}
		String useruid = user.getUid();
		String refuid = refUser.getUid();
		Subscribe bean = so.get(useruid, refuid);// 查看是否订阅，A是否订阅B B是否订阅A
		if (bean == null) {// 没有订阅记录，添加 A订阅B
			isSubscribe = true;
			bool = so.add(useruid, refuid, EFollow.follow);
		} else {
			if (useruid.equals(bean.getUseruid()) || EFollow.bothfollow.equals(bean.getFollow())) {// A订阅B或者AB互相订阅
				isSubscribe = false;
				if (EFollow.bothfollow.equals(bean.getFollow())) {// 是否互相订阅
					so.updateFollow(bean.getUid(), useruid, refuid, EFollow.follow);// 取消互相订阅 原状态 A <--> B
				} else {
					so.delete(bean.getUid());// 取消订阅，直接删除 原状态 A --> B
				}
			} else {// B订阅A
				isSubscribe = true;// 订阅 both A <--> B
				bool = so.updateFollow(bean.getUid(), null, null, EFollow.bothfollow);// 修改为互相订阅
			}
		}
		if (bool) {
			InboxHP.sendInboxByMsg(SubscribeHP.sendSubMsg(user, refUser));
		}
		UserStatistics userStatistics = statisticsSO.obtainOne(useruid);
		UserStatistics refUserStatistics = statisticsSO.obtainOne(refuid);
		if (isSubscribe) {// 订阅 增加计数
			if (userStatistics != null) {
				statisticsSO.update(userStatistics.getUid(), userStatistics.getSubscribecount() + 1, MapperDict.subscribecount);
			}
			if (refUserStatistics != null) {
				statisticsSO.update(refUserStatistics.getUid(), refUserStatistics.getBesubscribecount() + 1, MapperDict.besubscribecount);
			}
		} else {// 取消 减少计数
			if (userStatistics != null) {
				statisticsSO.update(userStatistics.getUid(), (userStatistics.getSubscribecount() - 1) > 0 ? (userStatistics.getSubscribecount() - 1) : 0, MapperDict.subscribecount);
			}
			if (refUserStatistics != null) {
				statisticsSO.update(refUserStatistics.getUid(), (refUserStatistics.getBesubscribecount() - 1) > 0 ? (refUserStatistics.getBesubscribecount() - 1) : 0, MapperDict.besubscribecount);
			}
		}
		return bool;
	}

}
