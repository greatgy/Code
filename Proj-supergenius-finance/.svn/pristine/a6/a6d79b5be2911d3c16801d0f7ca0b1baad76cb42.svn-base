package com.supergenius.web.finance.controller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.genius.core.base.constant.BaseStrDict;
import com.genius.core.base.utils.StrUtil;
import com.genius.server.base.controller.BaseController;
import com.supergenius.global.conf.SysConf;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.server.common.utils.ValidUtil;
import com.supergenius.server.user.helper.BaseUserHP;
import com.supergenius.web.finance.helper.ContributeHP;
import com.supergenius.web.finance.helper.ContributorHP;
import com.supergenius.web.finance.helper.UserHP;
import com.supergenius.xo.finance.entity.Contribute;
import com.supergenius.xo.finance.entity.Contributor;
import com.supergenius.xo.finance.enums.EContributeState;
import com.supergenius.xo.finance.enums.EUsertype;
import com.supergenius.xo.finance.service.ContributeSO;
import com.supergenius.xo.finance.service.ContributorSO;
import com.supergenius.xo.finance.service.FinanceSO;
import com.supergenius.xo.user.entity.User;

/**
 * 投稿controller
 * @author liushaomin
 */
@Controller
public class ContributeController extends BaseController {

	@Autowired
	private ContributeSO so;

	@Autowired
	private ContributorSO contributorSO;

	@Autowired
	FinanceSO financeSO;

	/**
	 * 打开投稿页面
	 * @param model
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = { "/contribute" }, method = RequestMethod.GET)
	public String contribute(Map<String, Object> model, HttpServletRequest request) {
		// TODO 获取content表中的投稿协议
		model.put(ViewKeyDict.enumstype, ContributeHP.getEFinanceMap());
		return "contribute";
	}

	/**
	 * 提交投稿
	 * @param model
	 * @param request
	 * @param topic
	 * @return
	 */
	@RequestMapping(value = { "/contribute" }, method = RequestMethod.POST)
	public String contribute(Map<String, Object> model, Contribute contribute, String contributeimg, String avatarimg, HttpServletRequest request) {
		User user = BaseUserHP.getCurrUser(request);
		boolean flag = true;
		if (user == null) {// 校验 姓名 邮箱 简介 文章标题 关键词 稿件正文
			if (StringUtils.isEmpty(contribute.getEmail()) || !ValidUtil.isEmail(contribute.getEmail())) {
				flag = false;
			} else if (StringUtils.isEmpty(contribute.getName())) {
				flag = false;
			} else if (StringUtils.isEmpty(contribute.getSummary())) {
				flag = false;
			}
		}
		if (StringUtils.isEmpty(contribute.getTitle()) && contribute.getTitle().length() >= 1 && 50 >= contribute.getTitle().length()) {
			flag = false;
		} else if (StringUtils.isEmpty(contribute.getKeywords())) {
			flag = false;
		} else if (StringUtils.isEmpty(contribute.getContent())) {
			flag = false;
		}
		if (flag) {
			Contributor newcbutor = new Contributor();
			if (user != null) {
				User dbuser = UserHP.get(user.getUid());// session中信息不全，考虑直接取数据库，没必要在redis中增加信息
				Contributor contributor = contributorSO.get(dbuser.getUid());
				if (contributor != null) {// 会员重复投稿,Contributor update
					ContributorHP.set(contributor, dbuser);
					contributorSO.update(contributor);
				} else {// 会员第一次投稿,Contributor add
					newcbutor.setUid(dbuser.getUid());
					ContributorHP.set(newcbutor, dbuser);
					contributorSO.add(newcbutor);
				}
				contribute.setEmail(dbuser.getEmail());
				contribute.setName(dbuser.getShowname());
				contribute.setUseruid(dbuser.getUid());
				contribute.setUsertype(EUsertype.user);
			} else {// 游客投稿, Contributor add
				ContributorHP.set(newcbutor, contribute);
				if (StrUtil.isNotEmpty(avatarimg)) {
					String[] imgs = avatarimg.split(BaseStrDict.comma);
					newcbutor.set(imgs);
				}
				contributorSO.add(newcbutor);
				contribute.setUsertype(EUsertype.visitor);
				contribute.setUseruid(newcbutor.getUid());
			}
			if (StrUtil.isNotEmpty(contributeimg)) {
				String[] imgs = contributeimg.split(BaseStrDict.comma);
				contribute.set(imgs);
			}
			contribute.setState(EContributeState.init);
			contribute.clearXSS(contribute);
			if (so.add(contribute)) {
				return redirectPrefix + "/contribute/result/succeed";
			}
			return redirectPrefix + "/contribute/result/failed";
		}
		model.put(ViewKeyDict.bean, contribute);
		return contribute(model, request);
	}

	/**
	 * 投稿结果页
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = { "/contribute/result/{result:[a-z]+}" }, method = RequestMethod.GET)
	public String contribute_result(Map<String, Object> model, @PathVariable String result, HttpServletRequest request) {
		if (result.equals(ViewKeyDict.succeed)) {
			model.put(ViewKeyDict.success, true);
		} else {
			model.put(ViewKeyDict.failed, true);
		}
		return "contributeresult";
	}

	/**
	 * 上传图片处理
	 * @param model
	 * @param type
	 * @param file
	 * @param request
	 * @return
	 */
	@RequestMapping(value = { "/uploadimg/{type:[a-z]+}" }, method = RequestMethod.POST)
	public @ResponseBody
	String upload(Map<String, Object> model, @PathVariable String type, @RequestParam MultipartFile fileimg, HttpServletRequest request) {
		String data = null;
		if (type.equals(ViewKeyDict.contribute)) {
			data = ContributeHP.resizeImage(fileimg, SysConf.UploadImgPath + type, SysConf.ImgShowSizes, SysConf.ImgUploadBasePath);
		} else if (type.equals(ViewKeyDict.avatar)) {
			data = ContributeHP.resizeImage(fileimg, SysConf.UploadImgPath + type, SysConf.ImgAvatarSizes, SysConf.ImgUploadBasePath);
		} else if (type.equals(ViewKeyDict.topic)) {
			data = ContributeHP.resizeImage(fileimg, SysConf.UploadImgPath + type, SysConf.ImgAvatarSizes, SysConf.ImgUploadBasePath);
		}
		return data;
	}

	/**
	 * 投稿判断邮箱
	 * @param model
	 * @param email
	 * @return
	 */
	@RequestMapping(value = "/api/user/emailvalid")
	public @ResponseBody
	String emailvalid(Map<String, Object> model, @RequestParam("v") String email) {
		String flag = null;
		if (BaseUserHP.isEmailCommon(email)) {// 判断是否主流email
			flag = "";
		} else {
			flag = "1";
		}
		return flag.length() == 0 ? "true" : flag;
	}

}