package com.supergenius.web.front.life.helper;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.joda.time.DateTime;
import org.springframework.web.multipart.MultipartFile;

import com.genius.core.base.annotation.Json;
import com.genius.core.base.constant.BaseStrDict;
import com.genius.core.base.utils.CookieUtil;
import com.genius.core.base.utils.FileUtil;
import com.genius.core.base.utils.NetUtil;
import com.genius.core.base.utils.StrUtil;
import com.genius.core.cache.rule.Rule;
import com.genius.core.cache.utils.RedisUtil;
import com.genius.core.serial.utils.SerialUtil;
import com.genius.model.base.enums.EStatus;
import com.genius.server.base.helper.BaseHP;
import com.supergenius.global.conf.SysConf;
import com.supergenius.server.common.constants.ViewKeyDict;
import com.supergenius.server.user.helper.BaseUserHP;
import com.supergenius.xo.life.entity.Essay;
import com.supergenius.xo.life.enums.EComment;
import com.supergenius.xo.life.rule.LifeEssaySecondCommentCountRule;
import com.supergenius.xo.life.rule.PrizeCountEssayLifeRule;
import com.supergenius.xo.life.service.EssaySO;
import com.supergenius.xo.common.constants.MapperDict;
import com.supergenius.xo.common.enums.EChannel;
import com.supergenius.xo.user.entity.User;
import com.supergenius.xo.user.entity.Visitor;
import com.supergenius.xo.user.service.UserSO;
import com.supergenius.xo.user.service.VisitorSO;

/**
 * 评论HP
 * 
 * @author yangguang
 * @date 2017年8月29日14:29:39
 */
public class EssayHP extends BaseHP {

	private static EssaySO so;

	private static VisitorSO visitorSO;

	private static UserSO userSO;

	private static EssaySO getSO() {
		if (so == null) {
			so = (EssaySO) spring.getBean(EssaySO.class);
		}
		return so;
	}

	private static VisitorSO getVisitorSO() {
		if (visitorSO == null) {
			visitorSO = (VisitorSO) spring.getBean(VisitorSO.class);
		}
		return visitorSO;
	}

	private static UserSO getUserSO() {
		if (userSO == null) {
			userSO = (UserSO) spring.getBean(UserSO.class);
		}
		return userSO;
	}
	
	private static List<Essay> hotEssayList = new ArrayList<>();

	/**
	 * 插入数据（赞、评论） 修改相应的redis 插入数据赞 redis中对应的赞数+1
	 * 
	 * @param essay
	 * @return
	 */
	public static boolean add(Essay essay, HttpServletRequest request) {
		if (getSO().add(essay)) {
			incrCommentCount(essay, request);
			return true;
		}
		return false;
	}

	/**
	 * 对评论、赞计数加1
	 * 
	 * @param essay
	 * @return
	 */
	public static boolean incrCommentCount(Essay essay, HttpServletRequest request) {
		Rule rule = null;
		if (essay.getType() == EComment.comment) {
			if (StrUtil.isNotEmpty(essay.getData())) {
				rule = new LifeEssaySecondCommentCountRule(essay.getData());// 一级评论uid为key
				return RedisUtil.incr(rule) >= 0;
			}
		} else if (essay.getType() == EComment.praise) {
			rule = new PrizeCountEssayLifeRule(essay.getTouid());// 指被赞的评论uid
			return RedisUtil.incr(rule) >= 0;
		}
		return false;
	}

	/**
	 * 删除评论
	 * 
	 * @param uid
	 * @return
	 */
	public static void deleteEssay(String uid, String useruid) {
		List<String> uids = new ArrayList<>();
		Rule rule = null;
		Map<String, Object> updatemap = getParamMap();
		Essay essay = getSO().get(uid);
		if (StrUtil.isEmpty(essay.getTouid())) {
			Map<String, Object> map = getParamMap();
			map.put(MapperDict.data, uid);
			map.put(MapperDict.type, EComment.comment);
			List<Essay> list = getSO().getList(map);
			for (Essay temp : list) {
				uids.add(temp.getUid());
			}
		} else {
			rule = new LifeEssaySecondCommentCountRule(essay.getData());
			RedisUtil.decr(rule);
		}
		uids.add(uid);
		updatemap.put(MapperDict.uidlist, uids);
		updatemap.put(MapperDict.status, EStatus.deleted);
		getSO().updateFields(updatemap);
	}

	/**
	 * 取消赞 对redis中对应的赞数-1
	 * 
	 * @param fromuseruid
	 * @param fromuid
	 * @param channel
	 * @return
	 */
	public static boolean cancelPrize(String fromuseruid, String touid, String channel) {
		if (getSO().deleteByPraise(fromuseruid, touid, EChannel.get(channel))) {
			Rule rule = null;
			rule = new PrizeCountEssayLifeRule(touid);// 指被赞的评论uid
			return RedisUtil.decr(rule) >= 0;
		}
		return false;
	}

	/**
	 * 反序列化list 赞
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List<String> deserializeFromJson(String serialpath, String useruid) {
		String fullpath = SysConf.SerialBasePath + serialpath + SysConf.Separator_Directory + useruid;
		List<String> praiseuids = (List<String>) SerialUtil.deserializeFromJson(fullpath, List.class);
		return praiseuids;
	}

	/**
	 * 对essaylist设置fromuser
	 * 
	 * @param list
	 * @return
	 */
	public static void organized(List<Essay> list) {
		Map<String, Object> map = new HashMap<>();
		List<EStatus> liststatus = new ArrayList<>();
		liststatus.add(EStatus.start);
		liststatus.add(EStatus.enable);
		liststatus.add(EStatus.wait);
		map.put(MapperDict.statuslist, liststatus);
		List<User> users = getUserSO().getList(map);
		boolean isvisitor = true;
		Visitor visitor;
		for (Essay item : list) {
			isvisitor = true;
			for (User user : users) {
				if (user.getUid().equals(item.getFromuseruid())) {
					item.setFromUser(user);
					item.setUseruid(user.getUid());
					isvisitor = false;
				}
			}
			if (isvisitor) {
				visitor = getVisitorSO().get(item.getFromuseruid());
				item.setFromVisitor(visitor);
				item.setUseruid(visitor.getUseruid());
			}
		}
	}

	/**
	 * 对essay设置fromuser
	 * 
	 * @param list
	 * @return
	 */
	public static void organized(Essay essay) {
		Map<String, Object> map = new HashMap<>();
		List<EStatus> liststatus = new ArrayList<>();
		liststatus.add(EStatus.start);
		liststatus.add(EStatus.enable);
		map.put(MapperDict.statuslist, liststatus);
		List<User> users = getUserSO().getList(map);
		boolean isvisitor = true;
		Visitor visitor;
		isvisitor = true;
		for (User user : users) {
			if (user.getUid().equals(essay.getFromuseruid())) {
				essay.setFromUser(user);
				essay.setUseruid(user.getUid());
				isvisitor = false;
			}
		}
		if (isvisitor) {
			visitor = getVisitorSO().get(essay.getFromuseruid());
			essay.setFromVisitor(visitor);
			essay.setUseruid(visitor.getUseruid());
		}
	}

	/**
	 * 获取游客
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @author yangguang
	 */
	public static Visitor getNickVisitor(HttpServletRequest request, HttpServletResponse response) {
		String ip = NetUtil.getIPAddr(request);
		Visitor visitor = getRandomVisitor();
		if (StrUtil.isEmpty(visitor.getAvatar()) || StrUtil.isEmpty(visitor.getNickname()) ) {
			visitor = getRandomVisitor();
		}
		visitor.setLoginip(ip);
		visitor.setCreatetime(new DateTime());
		User user = BaseUserHP.getCurrUser(request);
		if (user != null) {
			visitor.setUseruid(user.getUid());
		}
		getVisitorSO().add(visitor);
		return visitor;
	}
	
	/**
	 * 获取游客
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @author yangguang
	 */
	public static Visitor getVisitor(HttpServletRequest request, HttpServletResponse response) {
		String visitorUid = CookieUtil.get(request, ViewKeyDict.visitors);
		Visitor visitor;
		Visitor temp;
		if (StrUtil.isNotEmpty(visitorUid)) {
			visitor = getVisitorSO().get(visitorUid);
			if (visitor != null) {
				if (StrUtil.isEmpty(visitor.getNickname()) || StrUtil.isEmpty(visitor.getAvatar())) {
					temp = getRandomVisitor();
					if (temp != null) {
						visitor.setNickname(temp.getNickname());
						visitor.setAvatar(temp.getAvatar());
						getVisitorSO().update(visitor);
					}
				}
			} else {
				String ip = NetUtil.getIPAddr(request);
				visitor = new Visitor();
				visitor.setLoginip(ip);
				visitor.setCreatetime(new DateTime());
				temp = getRandomVisitor();
				if (temp != null) {
					visitor.setNickname(temp.getNickname());
					visitor.setAvatar(temp.getAvatar());
				}
				Boolean bool = getVisitorSO().add(visitor);
				if (bool) {
					CookieUtil.addCookie(response, ViewKeyDict.visitors, visitor.getUid(), Integer.MAX_VALUE);
				}
			}
		} else {
			String ip = NetUtil.getIPAddr(request);
			visitor = new Visitor();
			visitor.setLoginip(ip);
			visitor.setCreatetime(new DateTime());
			temp = getRandomVisitor();
			if (temp != null) {
				visitor.setNickname(temp.getNickname());
				visitor.setAvatar(temp.getAvatar());
			}
			Boolean bool = getVisitorSO().add(visitor);
			if (bool) {
				CookieUtil.addCookie(response, ViewKeyDict.visitors, visitor.getUid(), Integer.MAX_VALUE);
			}
		}
		return visitor;
	}

	/**
	 * 获取随机昵称和头像
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @author ChenQi
	 */
	@SuppressWarnings("unchecked")
	public static Visitor getRandomVisitor() {
		String path = SysConf.SerialBasePath + SysConf.SerialUserVisitorPath;
		List<Visitor> list = new ArrayList<Visitor>();
		list = SerialUtil.deserializeFromJson(path, list.getClass(), Json.cacheStrategy);
		Visitor visitor = new Visitor();
		visitor = list.get((int) (Math.random() * list.size()));
		return visitor;
	}

	/**
	 * 获取用户是否点赞了该文章
	 * 
	 * @return
	 * @author ChenQi
	 */
	public static boolean isPrise(String uid, String useruid) {
		Map<String, Object> map = getParamMap();
		map.put(MapperDict.touid, uid);
		map.put(MapperDict.fromuseruid, useruid);
		map.put(MapperDict.type, EComment.praise);
		Essay essay = getSO().getOne(map);
		if (essay != null) {
			return true;
		}
		return false;
	}

	/**
	 * 获取他的热门鬼话并list分页截取
	 * 
	 * @param u
	 * @param pagenum
	 * @param pagesize
	 * @param model
	 * @param request
	 * @return
	 * @author 雍雪振
	 * @date 2
	 */
	public static List<Essay> getEssayHot(EComment eComment, int nu, int cid) {
		List<Essay> result = new ArrayList<>();
		if (hotEssayList.size() == 0) {
			Map<String, Object> map = getParamMap();
			map.put(MapperDict.type, eComment);
			map.put(MapperDict.touidnull, true);
			map.put(MapperDict.cid, cid);
			hotEssayList = getSO().getList(map);
			hotEssayList.sort(COMPARATOR1);
		}
		
		int maxHotsize = nu * SysConf.LoadEssaySize;
		if (maxHotsize > hotEssayList.size()) {
			maxHotsize = hotEssayList.size();
		}
		result = hotEssayList.subList((nu - 1) * SysConf.LoadEssaySize, maxHotsize);
		return result;
	}

	private static final Comparator<Essay> COMPARATOR1 = new Comparator<Essay>() {
		public int compare(Essay o1, Essay o2) {
			int i = o1.compareTo(o2);
			return i;// 运用Essay类的compareTo方法比较两个对象
		}
	};
	
	/**
	 * 处理上传的图片
	 * 
	 * @param fileimg
	 * @param string
	 * @param imgshowsizes
	 * @param imgUploadBasePath
	 * @author liushaomin
	 * @return
	 */
	public static String resizeImage(MultipartFile fileimg, String path, int[][] imgsizes, String imgUploadBasePath) {
		String[] paths = FileUtil.resizeImage(fileimg, path, imgsizes, imgUploadBasePath);
		String data = null;
		if (path.length() != 0) {
			data = paths[0] + BaseStrDict.comma + paths[1] + BaseStrDict.comma + paths[2] + BaseStrDict.comma + paths[3];
		}
		return data;
	}
}
